{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport RSAKey from '../../../utils/rsa/rsa';\nexport default {\n  name: 'LoginOtp',\n  emits: [\"setUiToggleNum\"],\n  data() {\n    return {\n      devtest: false,\n      // #TODEL 개발 완료시 삭제 필요\n      timer: {\n        base: 180,\n        // 기준 시간 - 초기화용\n        cont: 180,\n        // 실제 처리용 시간\n        text: \"03:00\",\n        // 화면에 표시될 시간\n        interval: \"\" // interval 세팅용 변수\n      },\n\n      mainOtpText: \"OTP 번호를 SMS 문자로 발송했습니다.\",\n      errerText: \"\" // UI : 공통 에러 표시\n    };\n  },\n\n  computed: {\n    userLoginData() {\n      // 로그인 성공 여부 & 에러 메시지\n      return this.$store.state.auth.userLoginData;\n    },\n    userInfo() {\n      // 로그인 사용자 정보\n      return this.$store.state.auth.userInfo;\n    },\n    userOtp() {\n      // Otp 정보 수신\n      return this.$store.state.auth.userOtp;\n    },\n    userLoginInfo() {\n      return this.$store.state.auth.userLoginInfo;\n    },\n    rsaKey() {\n      return this.$store.state.auth.rsaKey;\n    }\n  },\n  created() {\n    // #TODEL test용 - 기본값 false\n    this.timerStart();\n    if (process.env.VUE_APP_MODE == \"test\") {\n      this.devtest = true;\n    }\n  },\n  methods: {\n    // #TOFIX : 쿠키 가져오기 : 추후 보안 강화하고 공통 함수로 변경\n    getCookie(cName) {\n      cName = cName + '=';\n      let cookieData = document.cookie;\n      let start = cookieData.indexOf(cName);\n      let cValue = '';\n      if (start != -1) {\n        start += cName.length;\n        let end = cookieData.indexOf(';', start);\n        if (end == -1) {\n          end == cookieData.length;\n        }\n        cValue = cookieData.substring(start, end);\n      }\n      return unescape(cValue);\n    },\n    // 인증번호 카운트 다운 - 시작\n    timerStart() {\n      this.timer.text = \"03:00\";\n      this.timer.cont = this.timer.base;\n      this.timer.interval = setInterval(() => {\n        this.timer.cont--;\n        this.timer.text = this.timerSetText();\n        if (this.timer.cont <= 0) {\n          this.timerStop();\n        }\n      }, 1000);\n    },\n    // 인증번호 카운트 다운 - 시간 종료\n    timerStop() {\n      clearInterval(this.timer.interval);\n      //let btn_otp = document.getElementById(\"btn_otp\");\n      //btn_otp.disabled = true;\n      this.errerText = \"인증 시간이 만료되었습니다.\";\n      this.timer.cont = 0;\n    },\n    // 인증번호 카운트 다운 - 남은 시간 화면에 텍스트로 추가\n    timerSetText() {\n      let time = this.timer.cont / 60;\n      let minutes = parseInt(time);\n      let secondes = Math.round((time - minutes) * 60);\n      return minutes.toString().padStart(2, \"0\") + \":\" + secondes.toString().padStart(2, \"0\");\n    },\n    // OTP 확인\n    resetOtp() {\n      this.timerStop();\n      // rsa 처리\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\n        const rsa = new RSAKey();\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\n        let loginId = this.userLoginInfo.loginId;\n        let loginPwd = this.userLoginInfo.loginPwd;\n        let payload = {\n          \"loginId\": rsa.encrypt(loginId),\n          \"loginPwd\": rsa.encrypt(loginPwd)\n        };\n        // $store 로그인 호출\n        this.$store.dispatch(\"auth/signin\", payload).then(() => {\n          // 로그인 성공시\n          if (this.userLoginData.resultCode == 1) {\n            this.userLoginInfo.loginId = loginId;\n            this.userLoginInfo.loginPwd = loginPwd;\n            this.errerText = \"\";\n            document.getElementById(\"ontmPwd\").value = \"\";\n            this.mainOtpText = \"OTP 번호를 SMS 문자로 재발송했습니다.\";\n            this.timerStart();\n          } else {\n            // #TOFIX 반복 부분 함수화, URL 변수화\n            if (this.userLoginData.resultCode == 5) {\n              this.errerText = \"내부 시스템 에러입니다.\";\n            } else if (this.userLoginData.resultCode == 95) {\n              // #TOFIX 팝업 열리는 부분 공통 변수화\n              let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\n              window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\n            } else {\n              this.errerText = this.userLoginData.resultMessage;\n              // this.$emit('setUiToggleNum', 2, 'pass');\n            }\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    authOtp() {\n      // #TOCHK 값 value값 가져오는게 이게 최선인가? - 컨포넌트 환경에서 안맞는 기법인듯 함.\n      if (this.userInfo.resCd != 1) {\n        alert(\"잘못된 접근입니다.\");\n        this.$emit('setUiToggleNum', 1, 'all');\n        return false;\n      }\n      let ontmPwd = document.getElementById(\"ontmPwd\").value;\n      if (ontmPwd == \"\") {\n        alert(\"OTP번호를 입력해주세요\");\n        document.getElementById(\"ontmPwd\").focus;\n      }\n      // rsa 처리\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\n        const rsa = new RSAKey();\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\n        let loginId = this.userLoginInfo.loginId;\n        let loginPwd = this.userLoginInfo.loginPwd;\n        // #TODO 기본 유효성 검증 추가되야되는 부분\n        let payload = {\n          \"loginId\": rsa.encrypt(loginId),\n          \"loginPwd\": rsa.encrypt(loginPwd),\n          \"ossAthnInntNo\": this.userInfo.ossAthnInntNo,\n          \"ontmPwd\": ontmPwd\n        };\n        // $store OTP 인증 호출\n        this.$store.dispatch(\"auth/authOtp\", payload).then(() => {\n          // otp 성공시\n          if (this.userOtp.resultCode == 1) {\n            this.userLoginInfo.loginId = loginId;\n            this.userLoginInfo.loginPwd = loginPwd;\n            // #TOFIX : 보안에 몹시 위배됨으로 보안 처리할 때 개선 필요\n            //localStorage.setItem('userInfo', JSON.stringify(this.$store.state.auth.userInfo));\n            // #TODO : 쿠키값에서 토큰 값 추출\n            // getCookie(토큰명). 각 호출마다 refresh 토큰은 갱신해 줘야함 - 상태관리 공통 함수로 추가\n            // #TOFIX : 받아온 토큰 정보 입력\n            // console.log(\"accessToken = \" + this.getCookie(\"accessToken\"));\n            // console.log(\"refreshToken = \" + this.getCookie(\"refreshToken\"));\n            //localStorage.setItem('accessToken', \"받아온 토큰 정보 입력\"); //this.getCookie()\n            // 페이지 이동 : 알람톡\n            this.$router.push({\n              path: '/alarm'\n            });\n          } else {\n            // #TOFIX 반복 부분 함수화, URL 변수화\n            if (this.userOtp.resultCode == 5) {\n              this.loginErrorText = \"내부 시스템 에러입니다.\";\n            } else if (this.userOtp.resultCode == 9) {\n              // 재발송 관련된 에러 처리\n              //let btn_otp = document.getElementById(\"btn_otp\");\n              //btn_otp.disabled = true;\n              this.errerText = this.userOtp.resultMessage;\n            } else if (this.userOtp.resultCode == 95) {\n              // #TOFIX 팝업 열리는 부분 공통 변수화\n              let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\n              window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\n            } else {\n              this.errerText = this.userOtp.resultMessage;\n            }\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["RSAKey","name","emits","data","devtest","timer","base","cont","text","interval","mainOtpText","errerText","computed","userLoginData","$store","state","auth","userInfo","userOtp","userLoginInfo","rsaKey","created","timerStart","process","env","VUE_APP_MODE","methods","getCookie","cName","cookieData","document","cookie","start","indexOf","cValue","length","end","substring","unescape","setInterval","timerSetText","timerStop","clearInterval","time","minutes","parseInt","secondes","Math","round","toString","padStart","resetOtp","dispatch","then","rsa","setPublic","public_key_modulus","public_key_exponent","loginId","loginPwd","payload","encrypt","resultCode","getElementById","value","options","window","open","resultMessage","catch","error","console","log","authOtp","resCd","alert","$emit","ontmPwd","focus","ossAthnInntNo","$router","push","path","loginErrorText"],"sourceRoot":"","sources":["C:\\CSAI_Front\\src\\views\\pages\\auth\\LoginOtp.vue"],"sourcesContent":["<template>\r\n  <dl>\r\n    <dt><label for=\"user_id\">OTP 인증</label></dt>\r\n    <dd>\r\n      <input type=\"text\" class=\"input_st_01\" id=\"ontmPwd\" placeholder=\"인증번호\" @keyup.enter=\"authOtp()\">\r\n    </dd>\r\n  </dl>\r\n  <p style=\"margin-bottom:40px\">{{mainOtpText}}</p>\r\n  <p style=\"float:left\">남은시간 : {{timer.text}}</p>\r\n  <p style=\"float:right; cursor: pointer; border:1px solid #ccc; padding:2px 5px; border-radius:5px; vertical-align:bottom;\" @click=\"resetOtp()\" v-show=\"this.userLoginInfo.loginPwd != null\">재발송</p>\r\n  <button @click=\"authOtp()\" id=\"btn_otp\">인증번호 확인</button>\r\n  <p class=\"error_txt\">{{errerText}}</p>\r\n</template>\r\n\r\n<script>\r\nimport RSAKey from '../../../utils/rsa/rsa';\r\n\r\nexport default {\r\n  name: 'LoginOtp',\r\n  emits : [\"setUiToggleNum\"],\r\n  data() {\r\n    return {\r\n      devtest : false, // #TODEL 개발 완료시 삭제 필요\r\n      timer : {\r\n        base : 180, // 기준 시간 - 초기화용\r\n        cont : 180, // 실제 처리용 시간\r\n        text : \"03:00\", // 화면에 표시될 시간\r\n        interval : \"\" // interval 세팅용 변수\r\n      },\r\n      mainOtpText : \"OTP 번호를 SMS 문자로 발송했습니다.\",\r\n      errerText : \"\", // UI : 공통 에러 표시\r\n    }\r\n  },\r\n  computed: {\r\n    userLoginData() {\r\n      // 로그인 성공 여부 & 에러 메시지\r\n      return this.$store.state.auth.userLoginData;\r\n    },\r\n    userInfo() {\r\n      // 로그인 사용자 정보\r\n      return this.$store.state.auth.userInfo;\r\n    },\r\n    userOtp() {\r\n      // Otp 정보 수신\r\n      return this.$store.state.auth.userOtp;\r\n    },\r\n    userLoginInfo(){\r\n      return this.$store.state.auth.userLoginInfo;\r\n    },\r\n    rsaKey() {\r\n      return this.$store.state.auth.rsaKey;\r\n    }\r\n  },\r\n  created() {\r\n    // #TODEL test용 - 기본값 false\r\n    this.timerStart();\r\n    if(process.env.VUE_APP_MODE == \"test\"){\r\n      this.devtest = true;\r\n    }\r\n  },\r\n  methods: {\r\n    // #TOFIX : 쿠키 가져오기 : 추후 보안 강화하고 공통 함수로 변경\r\n    getCookie(cName){\r\n      cName = cName + '=';\r\n      let cookieData = document.cookie;\r\n      let start = cookieData.indexOf(cName);\r\n      let cValue = '';\r\n      if(start != -1){\r\n        start += cName.length;\r\n        let end = cookieData.indexOf(';', start);\r\n        if(end == -1){\r\n          end == cookieData.length;\r\n        }\r\n        cValue = cookieData.substring(start, end);\r\n      }\r\n      return unescape(cValue);\r\n    },\r\n    // 인증번호 카운트 다운 - 시작\r\n    timerStart(){\r\n      this.timer.text = \"03:00\";\r\n      this.timer.cont = this.timer.base;\r\n      this.timer.interval = setInterval(() => {\r\n        this.timer.cont--;\r\n        this.timer.text = this.timerSetText();\r\n        if(this.timer.cont <= 0) {\r\n          this.timerStop();\r\n        }\r\n      }, 1000);\r\n    },\r\n    // 인증번호 카운트 다운 - 시간 종료\r\n    timerStop(){\r\n      clearInterval(this.timer.interval);\r\n      //let btn_otp = document.getElementById(\"btn_otp\");\r\n      //btn_otp.disabled = true;\r\n      this.errerText = \"인증 시간이 만료되었습니다.\";\r\n      this.timer.cont = 0;\r\n    },\r\n    // 인증번호 카운트 다운 - 남은 시간 화면에 텍스트로 추가\r\n    timerSetText(){\r\n      let time = this.timer.cont / 60;\r\n      let minutes = parseInt(time);\r\n      let secondes = Math.round((time - minutes) * 60);\r\n      return minutes.toString().padStart(2, \"0\") + \":\" + secondes.toString().padStart(2, \"0\")\r\n    },\r\n    // OTP 확인\r\n    resetOtp(){\r\n      this.timerStop();\r\n      // rsa 처리\r\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\r\n        const rsa = new RSAKey();\r\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\r\n        let loginId = this.userLoginInfo.loginId;\r\n        let loginPwd = this.userLoginInfo.loginPwd;\r\n        let payload = {\r\n            \"loginId\": rsa.encrypt(loginId), \r\n            \"loginPwd\": rsa.encrypt(loginPwd)\r\n        };\r\n        // $store 로그인 호출\r\n        this.$store.dispatch(\"auth/signin\", payload).then(() => {\r\n            // 로그인 성공시\r\n            if(this.userLoginData.resultCode == 1){\r\n\r\n              this.userLoginInfo.loginId = loginId;\r\n              this.userLoginInfo.loginPwd = loginPwd;\r\n              this.errerText = \"\";\r\n              document.getElementById(\"ontmPwd\").value = \"\";\r\n              this.mainOtpText = \"OTP 번호를 SMS 문자로 재발송했습니다.\"\r\n              this.timerStart();\r\n            }else{\r\n              // #TOFIX 반복 부분 함수화, URL 변수화\r\n              if(this.userLoginData.resultCode == 5){\r\n                this.errerText = \"내부 시스템 에러입니다.\"\r\n              }else if(this.userLoginData.resultCode == 95){\r\n                // #TOFIX 팝업 열리는 부분 공통 변수화\r\n                let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\r\n                window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\r\n              }else{\r\n                this.errerText = this.userLoginData.resultMessage\r\n                // this.$emit('setUiToggleNum', 2, 'pass');\r\n              }\r\n            }\r\n        }).catch(error => {\r\n          console.log(error);\r\n        });\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    },\r\n    authOtp(){\r\n      // #TOCHK 값 value값 가져오는게 이게 최선인가? - 컨포넌트 환경에서 안맞는 기법인듯 함.\r\n      if(this.userInfo.resCd != 1){\r\n        alert(\"잘못된 접근입니다.\");\r\n        this.$emit('setUiToggleNum', 1, 'all');\r\n        return false;\r\n      }\r\n\r\n      let ontmPwd = document.getElementById(\"ontmPwd\").value;\r\n      if(ontmPwd == \"\"){\r\n        alert(\"OTP번호를 입력해주세요\");\r\n        document.getElementById(\"ontmPwd\").focus;\r\n      }\r\n      // rsa 처리\r\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\r\n        const rsa = new RSAKey();\r\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\r\n        let loginId = this.userLoginInfo.loginId;\r\n        let loginPwd = this.userLoginInfo.loginPwd;\r\n        // #TODO 기본 유효성 검증 추가되야되는 부분\r\n        let payload = {\r\n            \"loginId\": rsa.encrypt(loginId), \r\n            \"loginPwd\": rsa.encrypt(loginPwd),\r\n            \"ossAthnInntNo\": this.userInfo.ossAthnInntNo, \r\n            \"ontmPwd\": ontmPwd\r\n        };\r\n        // $store OTP 인증 호출\r\n        this.$store.dispatch(\"auth/authOtp\", payload).then(() => {\r\n          // otp 성공시\r\n          if(this.userOtp.resultCode == 1){\r\n            this.userLoginInfo.loginId = loginId;\r\n            this.userLoginInfo.loginPwd = loginPwd;\r\n            // #TOFIX : 보안에 몹시 위배됨으로 보안 처리할 때 개선 필요\r\n            //localStorage.setItem('userInfo', JSON.stringify(this.$store.state.auth.userInfo));\r\n            // #TODO : 쿠키값에서 토큰 값 추출\r\n            // getCookie(토큰명). 각 호출마다 refresh 토큰은 갱신해 줘야함 - 상태관리 공통 함수로 추가\r\n            // #TOFIX : 받아온 토큰 정보 입력\r\n            // console.log(\"accessToken = \" + this.getCookie(\"accessToken\"));\r\n            // console.log(\"refreshToken = \" + this.getCookie(\"refreshToken\"));\r\n            //localStorage.setItem('accessToken', \"받아온 토큰 정보 입력\"); //this.getCookie()\r\n            // 페이지 이동 : 알람톡\r\n            this.$router.push({path:'/alarm'});\r\n          }else{\r\n            // #TOFIX 반복 부분 함수화, URL 변수화\r\n            if(this.userOtp.resultCode == 5){\r\n              this.loginErrorText = \"내부 시스템 에러입니다.\"\r\n            }else if(this.userOtp.resultCode == 9){\r\n              // 재발송 관련된 에러 처리\r\n              //let btn_otp = document.getElementById(\"btn_otp\");\r\n              //btn_otp.disabled = true;\r\n              this.errerText = this.userOtp.resultMessage;\r\n            }else if(this.userOtp.resultCode == 95){\r\n              // #TOFIX 팝업 열리는 부분 공통 변수화\r\n              let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\r\n              window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\r\n            }else{\r\n              this.errerText = this.userOtp.resultMessage;\r\n            }\r\n          }\r\n        }).catch(error => {\r\n          console.log(error);\r\n        });\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}