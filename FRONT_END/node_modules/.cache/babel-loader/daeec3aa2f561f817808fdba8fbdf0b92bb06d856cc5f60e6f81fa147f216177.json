{"ast":null,"code":"import axios from 'axios';\nimport router from '../../../router';\nlet axiosInstance = axios.create({\n  baseURL: process.env.VUE_APP_API_URL,\n  timeout: 120000\n});\naxiosInstance.interceptors.request.use(function (config) {\n  //axios.defaults.withCredentials = true; \n  config.withCredentials = true;\n  // API 별 토큰 설정 필요 : localStorage 세팅은 임시로만.....\n  //let token = localStorage.getItem('user-token')\n  //if (token) config.headers['x-access-token'] = token\n  //let accessToken = localStorage.getItem('accessToken')\n  //if (accessToken) config.headers['Authorization'] = 'Bearer ' + accessToken\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  /* eslint-disable */\n  //debugger;\n  // 응답 헤더에 설정 필요한 값(api에서 작업 필요)\n  // Access-Control-Allow-Credentials : true\n  // Access-Control-Allow-Origin : 반드시 설정되어있어야 함, 단 와일드 카드는 불가\n  // Access-Control-Allow-Methods, Headers : 와일드 카드 불가\n  return response;\n}, function (error) {\n  console.log(error);\n  if (error.response.status === 403 || error.response.status === 401) {\n    console.log('unauthorized, logging out ...');\n    //auth.logout()\n    router.replace('/login');\n  }\n  return Promise.reject(error);\n});\nclass HttpRequest {\n  constructor() {\n    this.axios = axios;\n  }\n  setHeader(header) {\n    axiosInstance.defaults.headers.common[header.key] = header.value;\n    axiosInstance.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8';\n  }\n  setAuthorizationHeader(accessToken) {\n    axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n  }\n  get(methodName, data) {\n    return axiosInstance.get(methodName, {\n      params: data\n    });\n  }\n  post(methodName, data) {\n    return axiosInstance.post(methodName, data);\n  }\n  put(methodName, data) {\n    return axiosInstance.put(methodName, data);\n  }\n  delete(methodName, id) {\n    return axiosInstance.delete(methodName, {\n      params: {\n        id: id\n      }\n    });\n  }\n  request(type, url, data) {\n    let promise = null;\n    switch (type) {\n      case 'GET':\n        promise = axios.get(url, {\n          params: data\n        });\n        break;\n      case 'POST':\n        promise = axios.post(url, data);\n        break;\n      case 'PUT':\n        promise = axios.put(url, data);\n        break;\n      case 'DELETE':\n        promise = axios.delete(url, data);\n        break;\n      default:\n        promise = axios.get(url, {\n          params: data\n        });\n        break;\n    }\n    return promise;\n  }\n}\nexport default HttpRequest;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}