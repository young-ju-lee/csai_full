{"ast":null,"code":"/* eslint-disable */\n\nvar Arcfour = require('./prng4');\nconst SecureRandom = function () {\n  'use strict';\n\n  var rng_state;\n  var rng_pool;\n  var rng_pptr;\n  var rng_psize = 256;\n\n  // Mix in a 32-bit integer into the pool\n  function rng_seed_int(x) {\n    rng_pool[rng_pptr++] ^= x & 255;\n    rng_pool[rng_pptr++] ^= x >> 8 & 255;\n    rng_pool[rng_pptr++] ^= x >> 16 & 255;\n    rng_pool[rng_pptr++] ^= x >> 24 & 255;\n    if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n  }\n\n  // Mix in the current time (w/milliseconds) into the pool\n  function rng_seed_time() {\n    rng_seed_int(new Date().getTime());\n  }\n\n  // Initialize the pool with junk if needed.\n  if (rng_pool == null) {\n    rng_pool = new Array();\n    rng_pptr = 0;\n    var t;\n    if (typeof window !== 'undefined' && navigator.appName == 'Netscape' && navigator.appVersion < '5' && window.crypto) {\n      // Extract entropy (256 bits) from NS4 RNG if available\n      var z = window.crypto.random(32);\n      for (t = 0; t < z.length; ++t) {\n        rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n      }\n    }\n    while (rng_pptr < rng_psize) {\n      // extract some randomness from Math.random()\n      t = Math.floor(65536 * Math.random());\n      rng_pool[rng_pptr++] = t >>> 8;\n      rng_pool[rng_pptr++] = t & 255;\n    }\n    rng_pptr = 0;\n    rng_seed_time();\n    // rng_seed_int(window.screenX);\n    // rng_seed_int(window.screenY);\n  }\n\n  function rng_get_byte() {\n    if (rng_state == null) {\n      rng_seed_time();\n      rng_state = Arcfour; // prng_newstate();\n      rng_state.init(rng_pool);\n      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\n        rng_pool[rng_pptr] = 0;\n      }\n      rng_pptr = 0;\n      // rng_pool = null;\n    }\n    // TODO: allow reseeding after first request\n    return rng_state.next();\n  }\n  function rng_get_bytes(ba) {\n    var i;\n    for (i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n  }\n  function SecureRandom() {}\n  SecureRandom.prototype.nextBytes = rng_get_bytes;\n  return SecureRandom;\n}();\nconsole.log('SecureRandom', SecureRandom);\nif (typeof module === 'object' && module.exports) {\n  module.exports = SecureRandom;\n}","map":{"version":3,"names":["Arcfour","require","SecureRandom","rng_state","rng_pool","rng_pptr","rng_psize","rng_seed_int","x","rng_seed_time","Date","getTime","Array","t","window","navigator","appName","appVersion","crypto","z","random","length","charCodeAt","Math","floor","rng_get_byte","init","next","rng_get_bytes","ba","i","prototype","nextBytes","console","log","module","exports"],"sources":["C:/CSAI_Front/src/utils/rsa/rng.js"],"sourcesContent":["/* eslint-disable */\r\n\r\nvar Arcfour = require('./prng4')\r\n\r\nconst SecureRandom = (function () {\r\n  'use strict'\r\n\r\n  var rng_state\r\n  var rng_pool\r\n  var rng_pptr\r\n  var rng_psize = 256\r\n\r\n  // Mix in a 32-bit integer into the pool\r\n  function rng_seed_int (x) {\r\n    rng_pool[rng_pptr++] ^= x & 255\r\n    rng_pool[rng_pptr++] ^= (x >> 8) & 255\r\n    rng_pool[rng_pptr++] ^= (x >> 16) & 255\r\n    rng_pool[rng_pptr++] ^= (x >> 24) & 255\r\n    if (rng_pptr >= rng_psize) rng_pptr -= rng_psize\r\n  }\r\n\r\n  // Mix in the current time (w/milliseconds) into the pool\r\n  function rng_seed_time () {\r\n    rng_seed_int(new Date().getTime())\r\n  }\r\n\r\n  // Initialize the pool with junk if needed.\r\n  if (rng_pool == null) {\r\n    rng_pool = new Array()\r\n    rng_pptr = 0\r\n    var t\r\n    if (typeof window !== 'undefined' && navigator.appName == 'Netscape' && navigator.appVersion < '5' && window.crypto) {\r\n      // Extract entropy (256 bits) from NS4 RNG if available\r\n      var z = window.crypto.random(32)\r\n      for (t = 0; t < z.length; ++t) { rng_pool[rng_pptr++] = z.charCodeAt(t) & 255 }\r\n    }\r\n    while (rng_pptr < rng_psize) { // extract some randomness from Math.random()\r\n      t = Math.floor(65536 * Math.random())\r\n      rng_pool[rng_pptr++] = t >>> 8\r\n      rng_pool[rng_pptr++] = t & 255\r\n    }\r\n    rng_pptr = 0\r\n    rng_seed_time()\r\n    // rng_seed_int(window.screenX);\r\n    // rng_seed_int(window.screenY);\r\n  }\r\n\r\n  function rng_get_byte () {\r\n    if (rng_state == null) {\r\n      rng_seed_time()\r\n      rng_state = Arcfour // prng_newstate();\r\n      rng_state.init(rng_pool)\r\n      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) { rng_pool[rng_pptr] = 0 }\r\n      rng_pptr = 0\r\n      // rng_pool = null;\r\n    }\r\n    // TODO: allow reseeding after first request\r\n    return rng_state.next()\r\n  }\r\n\r\n  function rng_get_bytes (ba) {\r\n    var i\r\n    for (i = 0; i < ba.length; ++i) ba[i] = rng_get_byte()\r\n  }\r\n\r\n  function SecureRandom () { }\r\n  SecureRandom.prototype.nextBytes = rng_get_bytes\r\n\r\n  return SecureRandom\r\n})()\r\n\r\nconsole.log('SecureRandom', SecureRandom)\r\nif (typeof module === 'object' && module.exports) {\r\n  module.exports = SecureRandom\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}