{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/CSAI_Front/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es.array.push.js\");\nvar _ConsultNetDiagram = _interopRequireDefault(require(\"./ConsultNetDiagram\"));\nvar _ConsultGuidelines = _interopRequireDefault(require(\"./ConsultGuidelines\"));\nvar _ConsultChat = _interopRequireDefault(require(\"./ConsultChat\"));\nvar _ConsultAccptInfo = _interopRequireDefault(require(\"./ConsultAccptInfo\"));\nvar _ConsultCmpltHist = _interopRequireDefault(require(\"./ConsultCmpltHist\"));\nvar _ConsultHist = _interopRequireDefault(require(\"./ConsultHist\"));\nvar _ConsultSendImgLayer = _interopRequireDefault(require(\"./layer/ConsultSendImgLayer\"));\nvar _StringUtil = _interopRequireDefault(require(\"../../../utils/StringUtil\"));\n// 댁내 망구성도\n// AI 가이드라인\n// 메인 채팅창\n// 고장접수 정보\n// 고장이력 정보\n// 비대면 응대이력\n// ** Layer ** //\n// AI 가이드라인 이미지 Layer\n//import ConsultGuideTextPopup from './popup/ConsultGuideTextPopup' ; //상세가이드 팝업\nvar _default = {\n  name: 'App',\n  components: {\n    ConsultNetDiagram: _ConsultNetDiagram.default,\n    // 댁내 망구성도\n    ConsultGuidelines: _ConsultGuidelines.default,\n    // AI 가이드라인\n    ConsultChat: _ConsultChat.default,\n    // 메인 채팅창\n    ConsultAccptInfo: _ConsultAccptInfo.default,\n    // 고장접수 정보\n    ConsultCmpltHist: _ConsultCmpltHist.default,\n    // 고장이력 정보\n    ConsultHist: _ConsultHist.default,\n    // 비대면 응대이력\n    ConsultSendImgLayer: _ConsultSendImgLayer.default\n    // AI 가이드라인 이미지 호출\n    // ConsultGuideTextPopup //상세 가이드 팝업\n  },\n\n  data() {\n    return {\n      showLayer: false,\n      sendImgObj: {\n        imgUrl: \"\",\n        imgType: \"\"\n      },\n      consultingList: [],\n      checkItemId: \"\"\n    };\n  },\n  created() {},\n  computed: {\n    roomInfo() {\n      return this.$store.state.alarm.roomInfo;\n    },\n    userInfo() {\n      // 로그인 사용자 정보\n      return this.$store.state.auth.userInfo;\n    },\n    consulting() {\n      return this.$store.state.consult.consulting;\n    },\n    consultTarget() {\n      // 로그인 사용자 정보\n      return this.$store.state.consult.consultTarget;\n    },\n    consultHist() {\n      return this.$store.state.consult.consultHist;\n    },\n    renewalToken() {\n      return this.$store.state.auth.renewalToken;\n    }\n  },\n  methods: {\n    showImg(imgUrl, imgType) {\n      this.sendImgObj.imgUrl = imgUrl;\n      this.sendImgObj.imgType = imgType;\n      this.showLayer = true;\n    },\n    closeImg() {\n      this.showLayer = false;\n    },\n    sendImg(imgType2) {\n      console.log(this.sendImgObj.imgUrl);\n      this.$refs.ConsultChat.sendImg(this.sendImgObj.imgUrl, this.sendImgObj.imgType, imgType2);\n      this.closeImg();\n    },\n    getConsulting() {\n      // 토큰 갱신 확인 후 로직 진행\n      this.$store.dispatch(\"auth/renewalToken\").then(() => {\n        if (this.renewalToken.data) {\n          // this.consulting init\n          this.consulting = [];\n          // TTID 조회\n          let item = this.userInfo.loginId;\n          this.$store.dispatch(\"consult/consulting\", item).then(() => {\n            // 초기화\n            // 알림톡 전송 (로직 선 처리)\n            let targetName = this.consultTarget.targetName;\n            if (targetName != null && targetName != '') {\n              this.sendAlarmTalk();\n            } else {\n              this.setgetConsultingList('setting');\n            }\n          }).catch(error => {\n            console.log(error);\n          });\n        } else {\n          alert(\"로그인이 만료되었습니다. 다시 로그인해주세요.\");\n          // localStorage 초기화\n          localStorage.clear();\n          // logout 호출\n          this.$store.dispatch(\"auth/signout\").then(() => {\n            // 로그아웃 성공\n            this.$router.push({\n              path: '/login'\n            });\n          }).catch(error => {\n            // 로그아웃 호출 실패. 로그인 페이지로 이동\n            console.log(error);\n            this.$router.push({\n              path: '/login'\n            });\n          });\n        }\n      });\n    },\n    setgetConsultingList(type) {\n      if (this.consulting.length == 0) {\n        alert(\"진행중인 상담이 없습니다.\");\n      }\n      // 기준값\n      //let showDataListNum = 10;\n      // 기준값 리스트값 비교 후 신규 배열 생성\n      //let currConsultCnt = (showDataListNum < this.consulting.length ? showDataListNum : this.consulting.length);\n      for (let i = 0; i < this.consulting.length; i++) {\n        this.consultTarget.consultArray.push(this.consulting[i]);\n        //this.consultTarget.socketArray[i] = [];\n        this.consultTarget.reiveMessgeArray[i] = [];\n        this.consultTarget.consultArray[i].histArray = [];\n        if (type == 'alarm' && i == 0) {\n          this.consultTarget.currTargetIdx = 0;\n          this.$refs.ConsultChat.connect(this.consulting[i], i);\n        } else {\n          this.$refs.ConsultChat.reConnect(this.consulting[i], i);\n        }\n      }\n      if (this.consultTarget.currTargetIdx == \"\") {\n        this.consultTarget.currTargetIdx = this.consultTarget.consultArray[0].id;\n        this.getConsoltContent(this.consultTarget.consultArray[0], 0);\n        this.$refs.ConsultGuidelines.openConsultGuideTextPopup();\n      }\n      this.$forceUpdate();\n      console.log(this.consultTarget);\n      // this.$refs.ConsultChat.reConnect(item);\n      // 신규 배열 생성되면 생성된 수 만큼 소캣 연결\n    },\n\n    getConsoltContent(item, idx) {\n      // 현재 상담 세팅\n      this.consultTarget.currTargetIdx = item.id;\n      this.consultTarget.currConsultId = item.consult_id;\n      this.consultTarget.currUserKey = item.user_key;\n      this.consultTarget.currTtID = item.tt_id;\n      this.consultTarget.targetNum = item.tel_num;\n      this.consultTarget.cnvrst_sttus = item.cnvrst_sttus;\n\n      // histArray가 없을 경우 histArray 세팅\n      if (this.consultTarget.consultArray[idx].histArray == undefined) {\n        this.consultTarget.consultArray[idx].histArray = [];\n      }\n      // histArray에 내용이 없고 대기중이 아닐시 consultHist 조회\n      if (this.consultTarget.consultArray[idx].histArray.length == 0 && item.cnvrst_sttus != \"W\") {\n        let payload = {\n          id: item.id,\n          consult_id: item.consult_id\n        };\n        this.$store.dispatch(\"consult/consultHist\", payload).then(() => {\n          // console.log(this.consultHist);\n          this.consultTarget.consultArray[idx].histArray = this.consultHist;\n          this.$forceUpdate();\n          //this.$refs.ConsultChat.reConnect(item);\n          //d84e77c4ee0a4e779e4055dcc959d579\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n      this.$refs.ConsultNetDigram.getHdmsDgrmList();\n      this.$refs.ConsultGuidelines.getEgl();\n      this.$refs.ConsultAccptInfo.getAccptInfo();\n      this.$refs.ConsultCmpltHist.getHistList();\n      this.$refs.ConsultHist.getConsultHistList();\n    },\n    sendAlarmTalk() {\n      // 알림톡 전달\n      if (this.consultTarget.alarmSendCheck == 0) {\n        this.setgetConsultingList('setting');\n        return;\n      }\n      // 스토리지 저장 방식 다 바꿔야함\n      let ttId = this.consultTarget.currTtID; // localStorage.getItem('ttId');\n      let svcMainClsCode = this.consultTarget.svcMainClsCode; // localStorage.getItem('svcMainClsCode'); \n      let sndNm = this.consultTarget.sndNm; // localStorage.getItem('sndNm'); \n      let sndTeam = this.consultTarget.sndTeam; // localStorage.getItem('sndTeam');\n      let targetNum = this.consultTarget.targetNum;\n      let targetName = this.consultTarget.targetName;\n      if (this.consulting.length >= 10) {\n        alert(\"최대 10명까지 상담 진행이 가능합니다.\");\n        this.consultTarget.alarmSendCheck = 0;\n        this.setgetConsultingList('setting');\n        return;\n      }\n      if (targetNum != \"\" && targetNum != null) {\n        if (confirm(targetNum + \"로 알림톡을 발송합니다.\")) {\n          let custNum = targetNum;\n          if (targetNum.startsWith(\"0\")) {\n            targetNum = \"82\" + targetNum.substring(1);\n          }\n          // - 제거\n          targetNum = targetNum.replace(/-/g, '');\n          for (let i in this.consulting) {\n            if (this.consulting[i].tel_num == targetNum) {\n              this.consultTarget.alarmSendCheck = 0;\n              alert(custNum + \"으로 이미 상담이 진행중입니다.\");\n              this.setgetConsultingList('setting');\n              return;\n            }\n          }\n          // let payload = {\n          //   \"to\": num\n          // };\n          //20230309 정민규 수정                 \n          let payload = {\n            \"trouble\": {\n              \"tt_id\": ttId,\n              \"svc_main_cls_code\": svcMainClsCode\n            },\n            \"sender\": {\n              \"snd_nm\": sndNm,\n              \"snd_team\": sndTeam,\n              \"snd_cmp_no\": this.userInfo.loginId\n            },\n            \"customer\": {\n              \"cust_nm\": targetName,\n              \"cust_tel_no\": targetNum\n            }\n          };\n          console.log(\"알림톡 발송 파람::\", payload);\n          this.$store.dispatch(\"alarm/sendAlarmTalk\", payload).then(() => {\n            // 알림톡 -> 전환 관련 처리\n            this.consultTarget.alarmSendCheck = 0;\n            console.log(this.roomInfo);\n            let timeElapsed = Date.now();\n            let today = new Date(timeElapsed);\n            // 상담중인 고객 리스트 추가\n            let newConsult = {\n              cnvrst_sttus: 'W',\n              consult_datetime: today.toUTCString(),\n              consult_id: this.roomInfo.consult_id,\n              cust_nm: targetName,\n              tel_num: targetNum,\n              tt_id: ttId,\n              id: 0\n            };\n            this.consulting.unshift(newConsult);\n            this.setgetConsultingList('alarm');\n          }).catch(error => {\n            alert(\"알림톡이 발송실패. - 서버 응답 없음\");\n            console.log(error);\n          });\n        } else {\n          this.consultTarget.alarmSendCheck = 0;\n          this.setgetConsultingList('setting');\n        }\n      }\n    },\n    StringUtil() {\n      var obj = _StringUtil.default;\n      return obj;\n    }\n  },\n  mounted() {\n    this.getConsulting();\n  }\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}