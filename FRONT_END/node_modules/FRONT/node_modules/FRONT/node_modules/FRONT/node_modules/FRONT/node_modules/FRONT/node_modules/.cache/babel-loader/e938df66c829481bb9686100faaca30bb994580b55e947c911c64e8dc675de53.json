{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport Stomp from 'webstomp-client';\nimport SockJS from 'sockjs-client';\nimport StringUtil from '../../../utils/StringUtil';\nexport default {\n  name: 'ConsultChat',\n  emits: [\"getConsulting\", \"showImg\"],\n  data() {\n    return {\n      message: \"\",\n      recvList: [],\n      user_key: \"\",\n      imgPathUrl: \"\",\n      file_name: \"\",\n      isDragging: false,\n      reConnectCnt: 0,\n      reporterOpinion: \"\",\n      //신고내용\n      socketArray: [],\n      show_reservation: false,\n      reservationDate: [{\n        value: \"09:00\"\n      }, {\n        value: \"10:00\"\n      }, {\n        value: \"11:00\"\n      }, {\n        value: \"12:00\"\n      }, {\n        value: \"13:00\"\n      }, {\n        value: \"14:00\"\n      }, {\n        value: \"15:00\"\n      }, {\n        value: \"16:00\"\n      }, {\n        value: \"17:00\"\n      }],\n      errorTxt: \"\"\n    };\n  },\n  created() {\n    // this.connect()\n    // App.vue가 생성되면 소켓 연결을 시도합니다.\n  },\n  computed: {\n    roomInfo() {\n      return this.$store.state.alarm.roomInfo;\n    },\n    //----------------------------------\n    // 고장접수 정보\n    //----------------------------------\n    accptInfo() {\n      return this.$store.state.trouble.accptInfo;\n    },\n    userInfo() {\n      // 로그인 사용자 정보\n      return this.$store.state.auth.userInfo;\n    },\n    consultHist() {\n      return this.$store.state.consult.consultHist;\n    },\n    consultTarget() {\n      // 로그인 사용자 정보\n      return this.$store.state.consult.consultTarget;\n    },\n    consultStatus() {\n      return this.$store.state.consult.consultStatus;\n    }\n  },\n  methods: {\n    // 메시지 전송\n    sendMessage(item1) {\n      this.consultTarget.currConsultId = item1.consult_id;\n      // #TODO 이 부분에 유효성 검증 처리가 들어가야 함\n      // 서버로 요청하기전에 1차적인 검증 필요 부분\n      // #TODO 메시지 공격 부분도 처리 필요할 수도 있음. 디테일 한 부분\n      if (this.message.length > 1000) {\n        alert(\"1000글자 이하로 작성 가능합니다. (\" + this.message.length + \"/1000)\");\n        return;\n      }\n      if (this.message !== '') {\n        this.sendConsultTalk();\n      }\n    },\n    sendConsultTalk() {\n      console.log(\"보내는 메시지 : \" + this.messageTemplet(\"TX\"));\n      //if (this.consultTarget.socketArray[this.consultTarget.currTargetIdx] && this.consultTarget.socketArray[this.consultTarget.currTargetIdx].connected) {\n      this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"TX\"), {});\n      this.message = '';\n      //}else{\n      // #TODO 소캣 정보가 없을시 연결에 대한 오류 처리\n      //}\n    },\n\n    showImg(value, type) {\n      console.log(value);\n      this.$emit('showImg', value, type);\n    },\n    // 보내는 메시지 json 공통화\n    messageTemplet(msgType) {\n      // eslint-disable-next-line \n      //debugger;\n      console.log(msgType);\n      const msg = {\n        consult_id: this.consultTarget.currConsultId,\n        user_key: this.consultTarget.currUserKey,\n        sender_type: \"CS\",\n        content: this.message,\n        content_type: msgType,\n        file_name: this.file_name\n      };\n      return JSON.stringify(msg);\n    },\n    // #COMMON : 이미지 변환에 대한 공통 함수 처리 필요\n    toDataURL(url, callback) {\n      let xhr = new XMLHttpRequest();\n      xhr.onload = function () {\n        let reader = new FileReader();\n        reader.onloadend = function () {\n          // 처리 된 후에 작동하도록 collback 처리. result에서 첫번째 , 까지 제거하는 처리 필요 . 기본 타입은 UI에서 제어\n          callback(reader.result);\n        };\n        reader.readAsDataURL(xhr.response);\n      };\n      // blob 방식으로 변환 - Base64\n      xhr.open('GET', url);\n      xhr.responseType = 'blob';\n      xhr.send();\n    },\n    sendImg(imgUrl, imgType, imgType2) {\n      if (this.consultTarget.cnvrst_sttus != 'A') {\n        alert(\"상담이 시작되지 않았음으로 이미지 전송이 불가합니다.\\n상담이 시작된 후 전송해 주세요\");\n      } else {\n        if (imgType == 'IM-RESEND') {\n          this.file_name = imgUrl.substr(5);\n          this.message = imgUrl;\n          this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"IM\"), {});\n          this.file_name = \"\";\n          this.message = \"\";\n        } else {\n          this.file_name = imgUrl + imgType2;\n          this.message = '/nas/' + imgUrl + imgType2;\n          this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"IM\"), {});\n          this.file_name = \"\";\n          this.message = \"\";\n        }\n      }\n    },\n    uploadImage(input) {\n      if (input.files && input.files[0]) {\n        console.log(\"input\");\n        let reader = new FileReader();\n        let self = this;\n        reader.onload = function (e) {\n          self.toDataURL(e.target.result, function (dataUrl) {\n            let fileBlock = dataUrl.split(\",\");\n            console.log(dataUrl);\n            self.file_name = fileBlock[0];\n            self.message = fileBlock[1];\n            self.consultTarget.socketArray[0].send(\"/pub/message\", self.messageTemplet(\"IM-BASE64\"), {});\n            self.file_name = \"\";\n            self.message = \"\";\n            self.isDragging = false;\n          });\n        };\n        reader.readAsDataURL(input.files[0]);\n      } else {\n        console.log(\"input?\");\n      }\n    },\n    dropInputTag(e) {\n      let file = Array.from(e.dataTransfer.files, v => v)[0];\n      this.$refs.image.files = e.dataTransfer.files;\n      //this.uploadImage(file);\n      console.log(file);\n      if (this.consultTarget.cnvrst_sttus != 'A') {\n        alert(\"상담이 시작되지 않았음으로 이미지 전송이 불가합니다.\\n상담이 시작된 후 전송해 주세요\");\n        this.isDragging = false;\n        //#TODO 3MB 스트림방식으로 보냈을떄 증가하는 값 고려 - 소캣, 복호화 관련해서 수호씨한테 질문\n      } else if (file.size > 2560224) {\n        alert(\"3MB 넘는 파일은 전송하실 수 없습니다.\");\n        this.isDragging = false;\n      } else {\n        this.file_name = file.name;\n        this.uploadImage(this.$refs.image);\n        console.log(file);\n        this.isDragging = false;\n      }\n    },\n    dragover() {\n      this.isDragging = true;\n    },\n    dragleave() {\n      this.isDragging = false;\n    },\n    connect() {\n      const serverURL = process.env.VUE_APP_API_URL + \"/web-socket\";\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      this.consultTarget.consultArray[0].consult_id;\n      this.consultTarget.currConsultId = this.consultTarget.consultArray[0].consult_id;\n      this.consultTarget.socketArray.unshift(Stomp.over(socket));\n      console.log(`소켓 연결을 시도. 서버 주소: ${serverURL}`);\n      this.consultTarget.socketArray[0].connect({}, frame => {\n        // 소켓 연결 성공\n        this.connected = true;\n        console.log('소켓 연결 성공 : ' + frame);\n        this.consultTarget.socketArray[0].subscribe(\"/sub/consult/\" + this.consultTarget.consultArray[0].consult_id, res => {\n          // 현재 id가 아닐 경우에만 class 추가 = connect는 0고정\n          if (document.getElementById('consult_id_0') != null) {\n            if (0 != this.consultTarget.currTargetIdx) {\n              document.getElementById('consult_id_0').classList.add(\"new\");\n            }\n          }\n          console.log('받은 메시지 : ' + res.body);\n          // 서버에서 받아온 메시지를 JSON 형식으로 변환해서 화면에 세팅\n          // #TODO 메시지 암호화 처리 들어가면 이부분에서 복호화 필요\n          let reiveMessge = JSON.parse(res.body);\n          console.log(reiveMessge);\n\n          // 최초 메시지 수신시(reference) user_Key 세팅 : user_key로 수신, 발신 구분\n          if (this.consultTarget.consultArray[0].cnvrst_sttus == 'W') {\n            this.consultTarget.consultArray[0].cnvrst_sttus = 'A';\n            this.consultTarget.cnvrst_sttus = 'A';\n            this.consultTarget.currUserKey = reiveMessge.user_key;\n            this.$forceUpdate();\n          }\n          this.consultTarget.reiveMessgeArray[0].push(reiveMessge);\n          // 스크롤 갱신 처리 : 처리 지연 개선 필요. DOM 기준으로 변경\n          setTimeout(function () {\n            let chat_box = document.getElementById(\"chat_box_0\");\n            chat_box.scrollTop = chat_box.scrollHeight;\n          }, 300);\n        });\n      }, error => {\n        // 소켓 연결 실패\n        console.log('소켓 연결 실패', error);\n        this.consultTarget.socketArray[0].connect();\n        this.connected = false;\n        if (this.reConnectCnt < 5) {\n          this.reConnectCnt = this.reConnectCnt + 1;\n          this.connect();\n        } else {\n          alert(\"재연결 5회 실패 - api 서버 연결 안됨\");\n          console.log('소켓 연결 5회 실패', error);\n        }\n        //this.connect();\n      });\n    },\n\n    reConnect(item, idx) {\n      const serverURL = process.env.VUE_APP_API_URL + \"/web-socket?idx=\" + idx;\n      this.user_key = item.user_key;\n      this.roomInfo.consult_id = item.consult_id;\n      //this.consultStatus = item.cnvrst_sttus;\n      //this.accptInfo.userName = item.cust_nm;\n      let socket = new SockJS(serverURL);\n      this.consultTarget.socketArray.push(Stomp.over(socket));\n      //this.stompClient = Stomp.over(socket);\n      console.log(`소켓 재연결을 시도. 서버 주소: ${serverURL}`);\n      //let chat_box = document.getElementById(\"chat_box\");\n      //chat_box.scrollTop = chat_box.scrollHeight;\n\n      this.consultTarget.socketArray[idx].connect({}, frame => {\n        // 소켓 연결 성공\n        this.connected = true;\n        console.log('소켓 재연결 성공 : ' + frame + \"/\" + item.consult_id);\n        this.consultTarget.socketArray[idx].subscribe(\"/sub/consult/\" + item.consult_id, res => {\n          if (document.getElementById('consult_id_' + item.id) != null) {\n            if (item.id != this.consultTarget.currTargetIdx) {\n              document.getElementById('consult_id_' + item.id).classList.add(\"new\");\n            }\n          }\n          console.log('받은 메시지 :' + res.body);\n\n          // 서버에서 받아온 메시지를 JSON 형식으로 변환해서 화면에 세팅\n          // #TODO 메시지 암호화 처리 들어가면 이부분에서 복호화 필요\n          let reiveMessge = JSON.parse(res.body);\n          console.log(reiveMessge);\n          /*if(reiveMessge.user_key != '' && this.user_key == ''){\r\n            this.user_key = reiveMessge.user_key;\r\n            this.recvList.push(reiveMessge);\r\n          }else{\r\n            this.recvList.push(reiveMessge);\r\n          }*/\n\n          // 최초 메시지 수신시(reference) user_Key 세팅 : user_key로 수신, 발신 구분\n          if (this.consultTarget.consultArray[idx].cnvrst_sttus == 'W') {\n            this.consultTarget.consultArray[idx].cnvrst_sttus = 'A';\n            this.consultTarget.cnvrst_sttus = 'A';\n            this.consultTarget.currUserKey = reiveMessge.user_key;\n            this.$forceUpdate();\n          }\n          this.consultTarget.reiveMessgeArray[idx].push(reiveMessge);\n          //this.recvList.push(reiveMessge);\n          // 스크롤 갱신 처리 : 처리 지연 개선 필요. DOM 기준으로 변경\n          setTimeout(function () {\n            let chat_box = document.getElementById(\"chat_box_\" + item.id);\n            chat_box.scrollTop = chat_box.scrollHeight;\n          }, 300);\n        });\n      }, error => {\n        // 소켓 연결 실패\n        console.log('소켓 연결 실패', error);\n        this.consultTarget.socketArray[idx].connect();\n        this.connected = false;\n        if (this.reConnectCnt < 5) {\n          this.reConnectCnt = this.reConnectCnt + 1;\n          this.connect();\n        } else {\n          alert(\"재연결 5회 실패 - api 서버 연결 안됨\");\n          console.log('소켓 연결 5회 실패', error);\n        }\n        //this.connect();\n      });\n    },\n\n    showReservation(item) {\n      this.show_reservation = true;\n      this.consultTarget.currConsultId = item.consult_id;\n      this.consultTarget.currUserKey = item.user_key;\n    },\n    closeReservation() {\n      this.errorTxt = \"\";\n      this.show_reservation = false;\n    },\n    setConsultReservation() {\n      let reservation_date = document.getElementById(\"reservation_date\").value;\n      if (reservation_date == \"\") {\n        this.errorTxt = \"예약일을 입력해주세요.\";\n        return;\n      }\n      this.errorTxt = \"\";\n      let reservation_time = document.getElementById(\"reservation_time\").value;\n      let rsv_time = reservation_date + \" \" + reservation_time;\n      if (confirm(rsv_time + \"로 예약 하시겠습니까? 예약시 상담이 종료됩니다.\")) {\n        let payload = {\n          tt_id: this.consultTarget.currTtID,\n          //this.roomInfo.consult_id,\n          status: 'reservation',\n          rsv_time: reservation_date + \"T\" + reservation_time + \":00\"\n        };\n        this.$store.dispatch(\"consult/consultReservation\", payload).then(() => {\n          // this.$emit('getConsulting');\n          let payload = {\n            consult_id: this.consultTarget.currConsultId,\n            //this.roomInfo.consult_id,\n            status: 'done',\n            user_key: this.consultTarget.currUserKey //this.user_key\n          };\n\n          this.$store.dispatch(\"consult/consultStatus\", payload).then(() => {\n            this.consultTarget.consultArray = [];\n            alert(\"상담이 예약되었습니다.\");\n            this.$router.push({\n              path: '/alarm'\n            });\n          }).catch(error => {\n            console.log(error);\n          });\n        }).catch(error => {\n          console.log(error);\n          this.errorTxt = \"시스템 에러입니다.\";\n        });\n      }\n    },\n    setConsultStatus(item, type, idx) {\n      let setStatus = 'pending';\n      if (type == 2) {\n        setStatus = 'done';\n      } else if (item.cnvrst_sttus == 'S') {\n        setStatus = 'consulting';\n      }\n      let payload = {\n        consult_id: item.consult_id,\n        //this.roomInfo.consult_id,\n        status: setStatus,\n        user_key: item.user_key //this.user_key\n      };\n\n      this.$store.dispatch(\"consult/consultStatus\", payload).then(() => {\n        //this.consultStatus = status;\n        //\n        // this.consultTarget.currTargetIdx = item.id;\n        //\n        this.consultTarget.cnvrst_sttus = this.consultStatus.cnvrst_sttus;\n        if (this.consultTarget.cnvrst_sttus == 'D') {\n          this.consultTarget.consultArray = [];\n          // this.$emit('getConsulting');\n          alert(\"상담이 완료되었습니다.\");\n          this.$router.push({\n            path: '/alarm'\n          });\n        } else {\n          this.consultTarget.consultArray[idx].cnvrst_sttus = this.consultStatus.cnvrst_sttus;\n        }\n        this.$forceUpdate();\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    StringUtil() {\n      var obj = StringUtil;\n      return obj;\n    }\n  },\n  mounted() {\n    // list는 있으나 선택된 값이 없을 시 0번째 값 선택\n    if (this.consultTarget.currTargetIdx == '' && this.consultTarget.consultArray.length != 0) {\n      this.consultTarget.currTargetIdx = this.consultTarget.consultArray[0].id;\n      this.$forceUpdate();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["Stomp","SockJS","StringUtil","name","emits","data","message","recvList","user_key","imgPathUrl","file_name","isDragging","reConnectCnt","reporterOpinion","socketArray","show_reservation","reservationDate","value","errorTxt","created","computed","roomInfo","$store","state","alarm","accptInfo","trouble","userInfo","auth","consultHist","consult","consultTarget","consultStatus","methods","sendMessage","item1","currConsultId","consult_id","length","alert","sendConsultTalk","console","log","messageTemplet","send","showImg","type","$emit","msgType","msg","currUserKey","sender_type","content","content_type","JSON","stringify","toDataURL","url","callback","xhr","XMLHttpRequest","onload","reader","FileReader","onloadend","result","readAsDataURL","response","open","responseType","sendImg","imgUrl","imgType","imgType2","cnvrst_sttus","substr","uploadImage","input","files","self","e","target","dataUrl","fileBlock","split","dropInputTag","file","Array","from","dataTransfer","v","$refs","image","size","dragover","dragleave","connect","serverURL","process","env","VUE_APP_API_URL","socket","stompClient","over","consultArray","unshift","frame","connected","subscribe","res","document","getElementById","currTargetIdx","classList","add","body","reiveMessge","parse","$forceUpdate","reiveMessgeArray","push","setTimeout","chat_box","scrollTop","scrollHeight","error","reConnect","item","idx","id","showReservation","closeReservation","setConsultReservation","reservation_date","reservation_time","rsv_time","confirm","payload","tt_id","currTtID","status","dispatch","then","$router","path","catch","setConsultStatus","setStatus","obj","mounted"],"sourceRoot":"","sources":["C:\\CSAI_Front\\src\\views\\pages\\consult\\ConsultChat.vue"],"sourcesContent":["<template>\r\n  <div class=\"group_item chat_item\" v-for=\"(item1, idx1) in consultTarget.consultArray\" :key=\"idx1\" v-show=\"consultTarget.currTargetIdx == item1.id\">\r\n    <h1>{{item1.cust_nm != null ? StringUtil().cusNmFormatter(item1.cust_nm) : '이름없음' }}님과의 상담창 <span>{{StringUtil().dateFormatter1(item1.consult_datetime)}} ~</span></h1>\r\n    <p class=\"chat_state bg_st02\"  v-if=\"item1.user_key == ''\">상담대기</p>\r\n    <p :class=\"'chat_state bg_st_' + item1.cnvrst_sttus\" v-if=\"item1.user_key != ''\">\r\n      {{ item1.cnvrst_sttus == 'S' ? '상담보류' : (item1.cnvrst_sttus == 'A' ? '진행중' : '대기중')}}\r\n    </p>\r\n    <div class=\"fc_st02\" style=\"text-align:center; padding:10px; background:#f0f4f5;\">상담시 개인정보가 유출되지 않도록 유의해 주시기 바랍니다</div>\r\n    <div \r\n      :class=\"'chat_box oy_s ' + (isDragging ? 'drag':'')\" \r\n      :id=\"'chat_box_' + item1.id\"\r\n      @drop.prevent=\"dropInputTag\"\r\n      @dragover.prevent\r\n      @dragover=\"dragover\"\r\n      @dragleave=\"dragleave\"\r\n    >\r\n      <input ref=\"image\" id=\"input\" type=\"file\" name=\"image\" @change=\"uploadImage(this)\" style=\"visibility: hidden; display:none;\">\r\n      <!-- 이력 추가되는 부분 -->\r\n      <div v-for=\"(item, idx) in item1.histArray\" :key=\"idx\">\r\n        <div class=\"get\" v-if=\"item.sender_type == 'CT'\">\r\n          <dl>\r\n            <dt>{{item1.cust_nm != null ? StringUtil().cusNmFormatter(item1.cust_nm) : '이름없음' }}<br>고객</dt>\r\n            <dd class=\"msg\" v-html=\"item.content.replace(/\\n/gi, '<br>')\" v-if=\"item.content_type != 'IM' && item.content_type != 'VI'\"></dd>\r\n            <dd class=\"msg\" style=\"text-align: center;\" v-if=\"item.content_type == 'VI'\"><embed :src=\"'data:video/mp4;base64,' + item.content\" style=\"width:100%; border-radius: 5px; margin-top: 5px; cursor: pointer; min-height:400px\"></dd>\r\n            <dd class=\"msg\" style=\"text-align: center;\" v-if=\"item.content_type == 'IM'\"><img :src=\"'data:image/jpeg;base64,' + item.content\" alt=\"\" style=\"width:100%; border-radius: 5px; margin-top: 5px;\"></dd>\r\n            <dd class=\"time\">{{item.chat_time}}</dd>\r\n          </dl>\r\n        </div>\r\n        <div class=\"send\" v-if=\"item.sender_type == 'CS'\">\r\n          <dl>\r\n            <dt></dt>\r\n            <dd class=\"time\">{{item.chat_time}}</dd>\r\n            <dd class=\"msg\" v-html=\"item.content.replace(/\\n/gi, '<br>')\" v-if=\"item.content_type == 'TX'\"></dd>\r\n            <dd class=\"msg\" style=\"text-align: center;\" v-if=\"item.content_type == 'IM-BASE64'\"><img :src=\"item.file_name + ',' + item.content\" alt=\"\" style=\"width:100%; border-radius: 5px; margin-top: 5px;\"></dd>\r\n            <dd class=\"msg\" style=\"text-align: center;\" v-if=\"item.content_type == 'IM'\"><img :src=\"'/nas/' + item.content\" :alt=\"item.file_name\" style=\"width:100%; border-radius: 5px; margin-top: 5px;\"></dd>\r\n          </dl>\r\n        </div>\r\n      </div>\r\n      <!-- 상담 추가되는 부분 -->\r\n      <div v-for=\"(item, idx) in consultTarget.reiveMessgeArray[idx1]\" :key=\"idx\">\r\n        <div class=\"get\" v-if=\"item.sender_type == 'CT'\">\r\n          <dl>\r\n            <dt>{{item1.cust_nm != null ? StringUtil().cusNmFormatter(item1.cust_nm) : '이름없음' }}<br>고객</dt>\r\n            <dd class=\"msg\" v-html=\"item.content.replace(/\\n/gi, '<br>')\" v-if=\"item.content_type != 'IM' && item.content_type != 'VI'\"></dd>\r\n            <dd class=\"msg\" style=\"text-align: center;\" v-if=\"item.content_type == 'VI'\"><embed :src=\"'data:video/mp4;base64,' + item.content\" style=\"width:100%; border-radius: 5px; margin-top: 5px; cursor: pointer; min-height:400px\"></dd>\r\n            <dd class=\"msg\" style=\"text-align: center;\" v-if=\"item.content_type == 'IM'\"><img :src=\"'data:image/jpeg;base64,' + item.content\" @click=\"this.$emit('showImg', 'data:image/jpeg;base64,' + item.content, 'IM-BASE64');\" alt=\"\" style=\"width:100%; border-radius: 5px; margin-top: 5px; cursor: pointer;\"></dd>\r\n            <dd class=\"time\">{{item.chat_time}}</dd>\r\n          </dl>\r\n        </div>\r\n        <div class=\"send\" v-if=\"item.sender_type == 'CS'\">\r\n          <dl>\r\n            <dt></dt>\r\n            <dd class=\"time\">{{item.chat_time}}</dd>\r\n            <dd class=\"msg\" v-html=\"StringUtil().cleanXSS(item.content.replace(/\\n/gi, '<br>'))\" v-if=\"item.content_type == 'TX'\"></dd>\r\n            <dd class=\"msg\" style=\"text-align: center;\" v-if=\"item.content_type == 'IM-BASE64'\"><img :src=\"item.file_name + ',' + item.content\" @click=\"this.$emit('showImg', 'data:image/jpeg;base64,' + item.content, 'IM-BASE64');\" alt=\"\" style=\"width:100%; border-radius: 5px; margin-top: 5px;\"></dd>\r\n            <dd class=\"msg\" style=\"text-align: center;\" v-if=\"item.content_type == 'IM'\"><img :src=\"item.content\" :alt=\"item.file_name\" style=\"width:100%; border-radius: 5px; margin-top: 5px;\" @click=\"this.$emit('showImg', item.content, 'IM-RESEND');\"></dd>\r\n          </dl>\r\n        </div>\r\n        <div class=\"error\" v-if=\"item.sender_type == 'NT'\">\r\n          <p v-html=\"item.content\"></p>\r\n          <ul style=\"display:none\">\r\n            <li><button>알림톡 재전송</button></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-show=\"item1.cnvrst_sttus == 'W'\">\r\n      <p class=\"chat_wait\">\r\n        상담 대상자가 아직 메시지를 확인하지 않았습니다.<br>\r\n        10분동안 상담이 시작되지 않으면 상담이 종료됩니다.\r\n      </p>\r\n    </div>\r\n    <div v-show=\"item1.cnvrst_sttus == 'S'\">\r\n      <p class=\"chat_hold\">\r\n        상담이 보류되었습니다.\r\n      </p>\r\n    </div>\r\n    <div class=\"chat_input_group\" v-show=\"item1.cnvrst_sttus == 'A'\">\r\n      <textarea class=\"chat_input\" v-model=\"message\"></textarea>\r\n      <button class=\"chat_button\" @click=\"sendMessage(item1)\">전송</button>\r\n    </div>\r\n    <div class=\"chat_ctrl_group\" v-show=\"item1.cnvrst_sttus != 'W'\">\r\n      <ul>\r\n        <li @click=\"setConsultStatus(item1, 1, idx1)\">{{ item1.cnvrst_sttus == 'S' ? '보류해제' : '상담보류'}}</li>\r\n        <li class=\"bg_st_R\" @click=\"showReservation(item1)\">예약일시 입력</li>\r\n        <!-- <li @click=\"setConsultStatus(item1, 2, idx1)\">상담완료</li> -->\r\n      </ul>\r\n    </div>\r\n  </div>\r\n  <div class=\"layer_popup\" v-show=\"show_reservation\">\r\n    <div class=\"reservation_box\">\r\n      <h1>예약일시 입력</h1>\r\n      <div class=\"layer_box\">\r\n        <dl class=\"dl_st_01\">\r\n          <dt><label for=\"user_id\">예약일</label></dt>\r\n          <dd>\r\n            <input type=\"date\" class=\"input_st_01\" id=\"reservation_date\" placeholder=\"예약일\" value=\"이준영\">\r\n          </dd>\r\n        </dl>\r\n        <dl>\r\n          <dt><label for=\"user_pw\">예약 시간</label></dt>\r\n          <dd>\r\n            <select class=\"reservation_select\" id=\"reservation_time\">\r\n              <option v-for=\"(item, idx) in reservationDate\" :key=\"idx\" :value=\"item.value\">{{item.value}}</option>\r\n            </select>\r\n          </dd>\r\n        </dl>\r\n        <button @click=\"setConsultReservation\">저장</button>\r\n        <p class=\"error_txt\">{{errorTxt}}</p>\r\n      </div>\r\n      <p class=\"layer_close\" @click=\"closeReservation\"></p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n  import Stomp from 'webstomp-client';\r\n  import SockJS from 'sockjs-client';\r\n  import StringUtil from '../../../utils/StringUtil';\r\n  \r\n  export default {\r\n    name: 'ConsultChat',\r\n    emits : [\"getConsulting\", \"showImg\"],\r\n    data() {\r\n      return {\r\n        message: \"\",\r\n        recvList: [],\r\n        user_key: \"\",\r\n        imgPathUrl : \"\",\r\n        file_name : \"\",\r\n        isDragging : false,\r\n        reConnectCnt : 0,        \r\n        reporterOpinion : \"\",     //신고내용\r\n        socketArray : [],\r\n        show_reservation : false,\r\n        reservationDate : [\r\n          {value:\"09:00\"},\r\n          {value:\"10:00\"},\r\n          {value:\"11:00\"},\r\n          {value:\"12:00\"},\r\n          {value:\"13:00\"},\r\n          {value:\"14:00\"},\r\n          {value:\"15:00\"},\r\n          {value:\"16:00\"},\r\n          {value:\"17:00\"},\r\n        ],\r\n        errorTxt : \"\"\r\n      }\r\n    },\r\n    created() {\r\n      // this.connect()\r\n      // App.vue가 생성되면 소켓 연결을 시도합니다.\r\n    },\r\n    computed: {\r\n      roomInfo() {\r\n        return this.$store.state.alarm.roomInfo;\r\n      },\r\n      //----------------------------------\r\n      // 고장접수 정보\r\n      //----------------------------------\r\n      accptInfo(){\r\n        return this.$store.state.trouble.accptInfo;\r\n      },\r\n      userInfo() {\r\n      // 로그인 사용자 정보\r\n        return this.$store.state.auth.userInfo;\r\n      },\r\n      consultHist(){\r\n        return this.$store.state.consult.consultHist;\r\n      },\r\n      consultTarget() {\r\n      // 로그인 사용자 정보\r\n        return this.$store.state.consult.consultTarget;\r\n      },\r\n      consultStatus(){\r\n        return this.$store.state.consult.consultStatus;\r\n      }\r\n    },\r\n    methods: {\r\n      // 메시지 전송\r\n      sendMessage(item1) {\r\n        this.consultTarget.currConsultId = item1.consult_id;\r\n        // #TODO 이 부분에 유효성 검증 처리가 들어가야 함\r\n        // 서버로 요청하기전에 1차적인 검증 필요 부분\r\n        // #TODO 메시지 공격 부분도 처리 필요할 수도 있음. 디테일 한 부분\r\n        if(this.message.length > 1000){\r\n          alert(\"1000글자 이하로 작성 가능합니다. (\"+ this.message.length +\"/1000)\");\r\n          return\r\n        }\r\n        if (this.message !== '') {\r\n          this.sendConsultTalk()\r\n        }\r\n      },\r\n      sendConsultTalk(){\r\n        console.log(\"보내는 메시지 : \" + this.messageTemplet(\"TX\"));\r\n        //if (this.consultTarget.socketArray[this.consultTarget.currTargetIdx] && this.consultTarget.socketArray[this.consultTarget.currTargetIdx].connected) {\r\n          this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"TX\"), {});\r\n          this.message = ''\r\n        //}else{\r\n          // #TODO 소캣 정보가 없을시 연결에 대한 오류 처리\r\n        //}\r\n      },\r\n      showImg(value, type){\r\n        console.log(value);\r\n        this.$emit('showImg', value, type);\r\n      },\r\n      // 보내는 메시지 json 공통화\r\n      messageTemplet(msgType){\r\n        // eslint-disable-next-line \r\n        //debugger;\r\n        console.log(msgType);\r\n        const msg = {\r\n          consult_id: this.consultTarget.currConsultId,\r\n          user_key: this.consultTarget.currUserKey,\r\n          sender_type : \"CS\",\r\n          content: this.message,\r\n          content_type : msgType,\r\n          file_name : this.file_name\r\n        };\r\n        return JSON.stringify(msg);\r\n      },\r\n      // #COMMON : 이미지 변환에 대한 공통 함수 처리 필요\r\n      toDataURL(url, callback){\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.onload = function(){\r\n          let reader = new FileReader();\r\n          reader.onloadend = function(){\r\n            // 처리 된 후에 작동하도록 collback 처리. result에서 첫번째 , 까지 제거하는 처리 필요 . 기본 타입은 UI에서 제어\r\n            callback(reader.result);\r\n          }\r\n          reader.readAsDataURL(xhr.response);\r\n        }\r\n        // blob 방식으로 변환 - Base64\r\n        xhr.open('GET', url);\r\n        xhr.responseType = 'blob';\r\n        xhr.send();\r\n      },\r\n      sendImg(imgUrl, imgType, imgType2){\r\n        if(this.consultTarget.cnvrst_sttus != 'A'){\r\n          alert(\"상담이 시작되지 않았음으로 이미지 전송이 불가합니다.\\n상담이 시작된 후 전송해 주세요\")\r\n        }else{\r\n          if(imgType == 'IM-RESEND'){\r\n            this.file_name = imgUrl.substr(5);\r\n            this.message = imgUrl\r\n            this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"IM\"), {});\r\n            this.file_name = \"\";\r\n            this.message = \"\";\r\n          }else{\r\n            this.file_name = imgUrl + imgType2;\r\n            this.message = '/nas/' + imgUrl + imgType2\r\n            this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"IM\"), {});\r\n            this.file_name = \"\";\r\n            this.message = \"\";\r\n          }\r\n        }\r\n      },\r\n\r\n      uploadImage(input){\r\n        if(input.files && input.files[0]){\r\n          console.log(\"input\");\r\n          let reader = new FileReader();\r\n          let self = this;\r\n          reader.onload = function(e) {\r\n            self.toDataURL(e.target.result, function(dataUrl) {\r\n              let fileBlock = dataUrl.split(\",\");\r\n              console.log(dataUrl);\r\n              self.file_name = fileBlock[0];\r\n              self.message = fileBlock[1];\r\n              self.consultTarget.socketArray[0].send(\"/pub/message\", self.messageTemplet(\"IM-BASE64\"), {});\r\n              self.file_name = \"\";\r\n              self.message = \"\";\r\n              self.isDragging = false;\r\n            })\r\n          }\r\n          reader.readAsDataURL(input.files[0]);\r\n        }else{\r\n           console.log(\"input?\");\r\n        }\r\n      },\r\n\r\n      dropInputTag(e){\r\n        let file = Array.from(e.dataTransfer.files, v => v)[0]\r\n        this.$refs.image.files = e.dataTransfer.files;\r\n        //this.uploadImage(file);\r\n        console.log(file);\r\n        if(this.consultTarget.cnvrst_sttus != 'A'){\r\n          alert(\"상담이 시작되지 않았음으로 이미지 전송이 불가합니다.\\n상담이 시작된 후 전송해 주세요\")\r\n          this.isDragging = false;\r\n          //#TODO 3MB 스트림방식으로 보냈을떄 증가하는 값 고려 - 소캣, 복호화 관련해서 수호씨한테 질문\r\n        }else if(file.size > 2560224){\r\n          alert(\"3MB 넘는 파일은 전송하실 수 없습니다.\");\r\n          this.isDragging = false;\r\n        }else{\r\n          this.file_name = file.name;\r\n          this.uploadImage(this.$refs.image);\r\n          console.log(file);\r\n          this.isDragging = false;\r\n        }\r\n      },\r\n      dragover(){\r\n        this.isDragging = true;\r\n      },\r\n      dragleave(){\r\n        this.isDragging = false;\r\n      },\r\n      connect() {\r\n        const serverURL = process.env.VUE_APP_API_URL + \"/web-socket\"\r\n        let socket = new SockJS(serverURL);\r\n        this.stompClient = Stomp.over(socket);\r\n        this.consultTarget.consultArray[0].consult_id;\r\n        this.consultTarget.currConsultId = this.consultTarget.consultArray[0].consult_id;\r\n        this.consultTarget.socketArray.unshift(Stomp.over(socket));\r\n        console.log(`소켓 연결을 시도. 서버 주소: ${serverURL}`)\r\n        this.consultTarget.socketArray[0].connect({},\r\n          frame => {\r\n            // 소켓 연결 성공\r\n            this.connected = true;\r\n            console.log('소켓 연결 성공 : ' + frame);\r\n            this.consultTarget.socketArray[0].subscribe(\"/sub/consult/\" + this.consultTarget.consultArray[0].consult_id, res => {\r\n              // 현재 id가 아닐 경우에만 class 추가 = connect는 0고정\r\n              if(document.getElementById('consult_id_0') != null){\r\n                if(0 != this.consultTarget.currTargetIdx){\r\n                  document.getElementById('consult_id_0').classList.add(\"new\");\r\n                }\r\n              }\r\n              console.log('받은 메시지 : ' + res.body);\r\n              // 서버에서 받아온 메시지를 JSON 형식으로 변환해서 화면에 세팅\r\n              // #TODO 메시지 암호화 처리 들어가면 이부분에서 복호화 필요\r\n              let reiveMessge = JSON.parse(res.body);\r\n              console.log(reiveMessge);\r\n              \r\n              // 최초 메시지 수신시(reference) user_Key 세팅 : user_key로 수신, 발신 구분\r\n              if(this.consultTarget.consultArray[0].cnvrst_sttus == 'W'){\r\n                this.consultTarget.consultArray[0].cnvrst_sttus = 'A';\r\n                this.consultTarget.cnvrst_sttus = 'A';\r\n                this.consultTarget.currUserKey = reiveMessge.user_key;\r\n                this.$forceUpdate();\r\n              }\r\n              \r\n              this.consultTarget.reiveMessgeArray[0].push(reiveMessge);\r\n              // 스크롤 갱신 처리 : 처리 지연 개선 필요. DOM 기준으로 변경\r\n              setTimeout(function(){\r\n                let chat_box = document.getElementById(\"chat_box_0\");\r\n                chat_box.scrollTop = chat_box.scrollHeight;\r\n              }, 300)\r\n            });\r\n          },\r\n          error => {\r\n            // 소켓 연결 실패\r\n            console.log('소켓 연결 실패', error);\r\n            this.consultTarget.socketArray[0].connect()\r\n            this.connected = false;\r\n            if(this.reConnectCnt < 5){\r\n              this.reConnectCnt = this.reConnectCnt + 1\r\n              this.connect();\r\n            }else{\r\n              alert(\"재연결 5회 실패 - api 서버 연결 안됨\");\r\n              console.log('소켓 연결 5회 실패', error);\r\n            }\r\n            //this.connect();\r\n          }\r\n        );\r\n      }, \r\n      reConnect(item, idx) {\r\n        const serverURL = process.env.VUE_APP_API_URL + \"/web-socket?idx=\" + idx\r\n        this.user_key = item.user_key;\r\n        this.roomInfo.consult_id = item.consult_id;\r\n        //this.consultStatus = item.cnvrst_sttus;\r\n        //this.accptInfo.userName = item.cust_nm;\r\n        let socket = new SockJS(serverURL);\r\n        this.consultTarget.socketArray.push(Stomp.over(socket));\r\n        //this.stompClient = Stomp.over(socket);\r\n        console.log(`소켓 재연결을 시도. 서버 주소: ${serverURL}`)\r\n        //let chat_box = document.getElementById(\"chat_box\");\r\n        //chat_box.scrollTop = chat_box.scrollHeight;\r\n        \r\n        this.consultTarget.socketArray[idx].connect({},\r\n          frame => {\r\n            // 소켓 연결 성공\r\n            this.connected = true;\r\n            console.log('소켓 재연결 성공 : ' + frame + \"/\" + item.consult_id);\r\n            this.consultTarget.socketArray[idx].subscribe(\"/sub/consult/\" + item.consult_id, res => {\r\n              if(document.getElementById('consult_id_' + item.id) != null){\r\n                if(item.id != this.consultTarget.currTargetIdx){\r\n                  document.getElementById('consult_id_' + item.id).classList.add(\"new\");\r\n                }\r\n              }\r\n              console.log('받은 메시지 :' + res.body);\r\n              \r\n              // 서버에서 받아온 메시지를 JSON 형식으로 변환해서 화면에 세팅\r\n              // #TODO 메시지 암호화 처리 들어가면 이부분에서 복호화 필요\r\n              let reiveMessge = JSON.parse(res.body);\r\n              console.log(reiveMessge);\r\n              /*if(reiveMessge.user_key != '' && this.user_key == ''){\r\n                this.user_key = reiveMessge.user_key;\r\n                this.recvList.push(reiveMessge);\r\n              }else{\r\n                this.recvList.push(reiveMessge);\r\n              }*/\r\n\r\n              // 최초 메시지 수신시(reference) user_Key 세팅 : user_key로 수신, 발신 구분\r\n              if(this.consultTarget.consultArray[idx].cnvrst_sttus == 'W'){\r\n                this.consultTarget.consultArray[idx].cnvrst_sttus = 'A';\r\n                this.consultTarget.cnvrst_sttus = 'A';\r\n                this.consultTarget.currUserKey = reiveMessge.user_key;\r\n                this.$forceUpdate();\r\n              }\r\n              \r\n              this.consultTarget.reiveMessgeArray[idx].push(reiveMessge);\r\n              //this.recvList.push(reiveMessge);\r\n              // 스크롤 갱신 처리 : 처리 지연 개선 필요. DOM 기준으로 변경\r\n              setTimeout(function(){\r\n                let chat_box = document.getElementById(\"chat_box_\" + item.id);\r\n                chat_box.scrollTop = chat_box.scrollHeight;\r\n              }, 300)\r\n            });\r\n          },\r\n          error => {\r\n            // 소켓 연결 실패\r\n            console.log('소켓 연결 실패', error);\r\n            this.consultTarget.socketArray[idx].connect()\r\n            this.connected = false;\r\n            if(this.reConnectCnt < 5){\r\n              this.reConnectCnt = this.reConnectCnt + 1\r\n              this.connect();\r\n            }else{\r\n              alert(\"재연결 5회 실패 - api 서버 연결 안됨\");\r\n              console.log('소켓 연결 5회 실패', error);\r\n            }\r\n            //this.connect();\r\n          }\r\n        );\r\n      },\r\n      showReservation(item){\r\n        this.show_reservation = true;\r\n        this.consultTarget.currConsultId = item.consult_id\r\n        this.consultTarget.currUserKey = item.user_key\r\n      },\r\n      closeReservation(){\r\n        this.errorTxt = \"\";\r\n        this.show_reservation = false;\r\n      },\r\n      setConsultReservation(){\r\n        let reservation_date = document.getElementById(\"reservation_date\").value;\r\n        if(reservation_date == \"\"){\r\n          this.errorTxt = \"예약일을 입력해주세요.\";\r\n          return;\r\n        }\r\n        this.errorTxt = \"\";\r\n        let reservation_time = document.getElementById(\"reservation_time\").value;\r\n        let rsv_time = reservation_date + \" \" + reservation_time;\r\n        if(confirm(rsv_time + \"로 예약 하시겠습니까? 예약시 상담이 종료됩니다.\")){\r\n          let payload = {\r\n            tt_id : this.consultTarget.currTtID, //this.roomInfo.consult_id,\r\n            status : 'reservation',\r\n            rsv_time : reservation_date + \"T\" + reservation_time + \":00\"\r\n          }\r\n          this.$store.dispatch(\"consult/consultReservation\", payload).then(() => {\r\n            // this.$emit('getConsulting');\r\n            let payload = {\r\n              consult_id : this.consultTarget.currConsultId, //this.roomInfo.consult_id,\r\n              status : 'done',\r\n              user_key : this.consultTarget.currUserKey//this.user_key\r\n\r\n            }\r\n            this.$store.dispatch(\"consult/consultStatus\", payload).then(() => {\r\n              this.consultTarget.consultArray = [];\r\n              alert(\"상담이 예약되었습니다.\");\r\n              this.$router.push({path:'/alarm'});\r\n            })\r\n            .catch(error => {\r\n              console.log(error);\r\n            });\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n            this.errorTxt = \"시스템 에러입니다.\";\r\n          });\r\n        }\r\n      },\r\n\r\n      setConsultStatus(item, type, idx){\r\n        let setStatus = 'pending'\r\n\r\n        if(type == 2){\r\n          setStatus = 'done'\r\n        }else if(item.cnvrst_sttus == 'S'){\r\n          setStatus = 'consulting'\r\n        }\r\n        let payload = {\r\n          consult_id : item.consult_id, //this.roomInfo.consult_id,\r\n          status : setStatus,\r\n          user_key : item.user_key//this.user_key\r\n        }\r\n        this.$store.dispatch(\"consult/consultStatus\", payload).then(() => {\r\n          //this.consultStatus = status;\r\n          //\r\n          // this.consultTarget.currTargetIdx = item.id;\r\n          //\r\n          this.consultTarget.cnvrst_sttus = this.consultStatus.cnvrst_sttus;\r\n          if(this.consultTarget.cnvrst_sttus == 'D'){\r\n            this.consultTarget.consultArray = [];\r\n            // this.$emit('getConsulting');\r\n            alert(\"상담이 완료되었습니다.\");\r\n            this.$router.push({path:'/alarm'});\r\n          }else{\r\n            this.consultTarget.consultArray[idx].cnvrst_sttus = this.consultStatus.cnvrst_sttus;\r\n          }\r\n          \r\n          this.$forceUpdate();\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      },\r\n      StringUtil(){\r\n        var obj = StringUtil;\r\n        return obj;        \r\n      }\r\n    },\r\n    mounted(){\r\n      // list는 있으나 선택된 값이 없을 시 0번째 값 선택\r\n      if(this.consultTarget.currTargetIdx == '' && this.consultTarget.consultArray.length != 0){\r\n        this.consultTarget.currTargetIdx = this.consultTarget.consultArray[0].id;\r\n        this.$forceUpdate();\r\n      }\r\n    }\r\n  }\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}