{"ast":null,"code":"import { authService } from '../../api';\n\n// state\nconst state = {\n  userLoginData: [],\n  // userLoginData : 사용자 로그인 관련 정보\n  userLoginInfo: [],\n  // userLoginInfo : 로그인 시도 정보\n  userInfo: [],\n  // userInfo : 사용자 정보(로그인 성공시에만 저장)\n  userOtp: [],\n  // userOtp : Otp 정보\n  ossInfo: [],\n  // ossInfo : oss통한 접속 시 정보\n  rsaKey: [],\n  renewalToken: []\n};\n\n// getters\nconst getters = {};\n\n// actions\nconst actions = {\n  // signin : 로그인 호출\n  async signin(context, payload) {\n    // 로그인 시도 정보 저장\n    state.userLoginInfo = payload;\n    let resp = await authService.signin(payload);\n    context.commit('SIGNIN', resp.data);\n  },\n  // authOtp : OTP 호출\n  async authOtp(context, payload) {\n    let resp = await authService.authOtp(payload);\n    context.commit('AUTH_OTP', resp.data);\n  },\n  // signout : 로그아웃\n  async signout(context) {\n    let resp = await authService.signout();\n    // #TOFIX : 로그아웃 후처리 필요할 수 있으니 일단 추가\n    context.commit('SIGNOUT', resp.data);\n  },\n  // renewalToken : 토큰 갱신\n  async renewalToken(context) {\n    let resp = await authService.renewalToken();\n    context.commit('RENEWAL_TOKEN', resp.data);\n  },\n  // userInfo : 로그인 복구용 데이터 확인\n  async userInfo(context) {\n    let resp = await authService.userInfo();\n    context.commit('USER_INFO', resp.data);\n  },\n  async rsaGetKey(context) {\n    let resp = await authService.rsaGetKey();\n    context.commit('RSA_GET_KEY', resp.data);\n  }\n};\n\n// mutations\nconst mutations = {\n  // signin : 로그인 응답 처리\n  SIGNIN(state, res) {\n    // res.resultCode == 1 : 성공\n    if (res.resultCode == 1) {\n      state.userInfo = res.data;\n      // console.log(\"userInfo set\");\n      // console.log(state.userInfo);\n    } else {\n      state.userInfo = [];\n    }\n    state.userLoginData = res;\n    // console.log(state.userLoginData);\n  },\n\n  // authOtp : OTP 응답 처리\n  AUTH_OTP(state, res) {\n    state.userOtp = res;\n    // console.log(res);\n    // console.log(\"--\");\n    // console.log(res.headers);\n  },\n\n  // signout : 로그아웃 응답 처리\n  SIGNOUT(state) {\n    // 로직의 처리 순서 변경 필요.\n    // #TOFIX : 보안상 서버단 로그인 호출이 실패했을 경우에도 로그아웃시 제거 필요함\n    state.userInfo = [];\n    state.userLoginData = [];\n  },\n  // renewalToken : 토큰 갱신 응답 처리\n  RENEWAL_TOKEN(state, res) {\n    state.renewalToken = res;\n  },\n  // userInfo : 로그인 복구용 데이터 확인 응답 처리\n  USER_INFO(state, res) {\n    // console.log(res);\n    // 기본 로그인이랑 맞춰야함.\n    state.userInfo = res.data;\n  },\n  RSA_GET_KEY(state, res) {\n    state.rsaKey = res.data;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["authService","state","userLoginData","userLoginInfo","userInfo","userOtp","ossInfo","rsaKey","renewalToken","getters","actions","signin","context","payload","resp","commit","data","authOtp","signout","rsaGetKey","mutations","SIGNIN","res","resultCode","AUTH_OTP","SIGNOUT","RENEWAL_TOKEN","USER_INFO","RSA_GET_KEY","namespaced"],"sources":["C:/CSAI_Front/src/store/modules/auth/index.js"],"sourcesContent":["\r\nimport { authService } from '../../api'\r\n\r\n// state\r\nconst state = {\r\n    userLoginData: [],  // userLoginData : 사용자 로그인 관련 정보\r\n    userLoginInfo:[],   // userLoginInfo : 로그인 시도 정보\r\n    userInfo:[],        // userInfo : 사용자 정보(로그인 성공시에만 저장)\r\n    userOtp:[],         // userOtp : Otp 정보\r\n    ossInfo:[],          // ossInfo : oss통한 접속 시 정보\r\n    rsaKey:[],\r\n    renewalToken : []\r\n}\r\n\r\n// getters\r\nconst getters = {\r\n\r\n}\r\n\r\n// actions\r\nconst actions = {\r\n    // signin : 로그인 호출\r\n    async signin(context, payload) {\r\n        // 로그인 시도 정보 저장\r\n        state.userLoginInfo = payload;\r\n        let resp = await authService.signin(payload);\r\n        context.commit('SIGNIN', resp.data);\r\n    },\r\n    // authOtp : OTP 호출\r\n    async authOtp(context, payload) {\r\n        let resp = await authService.authOtp(payload);\r\n        context.commit('AUTH_OTP', resp.data);\r\n    },\r\n    // signout : 로그아웃\r\n    async signout(context) {\r\n        let resp = await authService.signout();\r\n        // #TOFIX : 로그아웃 후처리 필요할 수 있으니 일단 추가\r\n        context.commit('SIGNOUT', resp.data);\r\n    },\r\n    // renewalToken : 토큰 갱신\r\n    async renewalToken(context) {\r\n        let resp = await authService.renewalToken();\r\n        context.commit('RENEWAL_TOKEN', resp.data);\r\n    },\r\n    // userInfo : 로그인 복구용 데이터 확인\r\n    async userInfo(context) {\r\n        let resp = await authService.userInfo();\r\n        context.commit('USER_INFO', resp.data);\r\n    },\r\n    async rsaGetKey(context) {\r\n        let resp = await authService.rsaGetKey();\r\n        context.commit('RSA_GET_KEY', resp.data);\r\n    },\r\n}\r\n\r\n// mutations\r\nconst mutations = {\r\n    // signin : 로그인 응답 처리\r\n    SIGNIN(state, res) {\r\n        // res.resultCode == 1 : 성공\r\n        if(res.resultCode == 1){\r\n            state.userInfo = res.data\r\n            // console.log(\"userInfo set\");\r\n            // console.log(state.userInfo);\r\n        }else{\r\n            state.userInfo = [];\r\n        }\r\n        state.userLoginData = res;\r\n        // console.log(state.userLoginData);\r\n    },\r\n    // authOtp : OTP 응답 처리\r\n    AUTH_OTP(state, res) {\r\n        state.userOtp = res;\r\n        // console.log(res);\r\n        // console.log(\"--\");\r\n        // console.log(res.headers);\r\n        \r\n    },\r\n    // signout : 로그아웃 응답 처리\r\n    SIGNOUT(state) {\r\n        // 로직의 처리 순서 변경 필요.\r\n        // #TOFIX : 보안상 서버단 로그인 호출이 실패했을 경우에도 로그아웃시 제거 필요함\r\n        state.userInfo = [];\r\n        state.userLoginData = [];\r\n    },\r\n    // renewalToken : 토큰 갱신 응답 처리\r\n    RENEWAL_TOKEN(state, res) {\r\n        state.renewalToken = res;\r\n    },\r\n    // userInfo : 로그인 복구용 데이터 확인 응답 처리\r\n    USER_INFO(state, res){\r\n        // console.log(res);\r\n        // 기본 로그인이랑 맞춰야함.\r\n        state.userInfo = res.data;\r\n    },\r\n    RSA_GET_KEY(state, res){\r\n        state.rsaKey = res.data;\r\n    },\r\n}\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    actions,\r\n    mutations\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}