{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ConsultNetDiagram',\n  data() {\n    return {\n      consultDgrmArray: []\n    };\n  },\n  created() {},\n  computed: {\n    hdmsDgrmList() {\n      return this.$store.state.trouble.hdmsDgrmList;\n    },\n    consultTarget() {\n      // 로그인 사용자 정보\n      return this.$store.state.consult.consultTarget;\n    }\n  },\n  methods: {\n    getHdmsDgrmList() {\n      this.consultDgrmArray = [];\n      let item = {\n        ttId: this.consultTarget.currTtID //localStorage.getItem('ttId')\n      };\n\n      this.$store.dispatch(\"trouble/hdmsDgrmList\", item).then(() => {\n        if (this.hdmsDgrmList.length > 0) {\n          this.getConsultDgrm();\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    getConsultDgrm() {\n      // 이전 블록 공백 계산용 (이전 블록 == 부모값이 다른 전 루프 데이터)\n      let beforeBlockArray = 1;\n      // 같은 부모 블록 계산용 (이전 블록 == 부모값이 다른 데이터)\n      let sameBlockCnt = 0;\n      // hdmsDgrmList -> consultDgrmArray UI용 데이터 배열 생성(자릿수로 push)\n      for (let i = 0; i < this.hdmsDgrmList.length; i++) {\n        console.log(this.hdmsDgrmList[i].seq);\n        // seq가 null이 아닐때만 put\n        if (this.hdmsDgrmList[i].seq != null) {\n          // 모뎀 세팅 (seq == 0)\n          if (this.hdmsDgrmList[i].seq == \"0\") {\n            // seq 삭제해서 자릿수 변경\n            this.hdmsDgrmList[i].seq = \"\";\n          }\n          // 사설장비 세팅\n          if (this.hdmsDgrmList[i].seq.indexOf(\"E\") >= 0) {\n            // seq 삭제해서 자릿수 변경\n            //if(this.hdmsDgrmList[i].seq.substr(1).length < 2){\n            let newHdms = Object.assign({}, this.hdmsDgrmList[i]);\n            newHdms.seq = 'Z1';\n            newHdms.typeClass = \"first_block\";\n            this.hdmsDgrmList[i].termlType = \"E\";\n            this.hdmsDgrmList.splice(i + 1, 0, newHdms);\n            this.hdmsDgrmList[i].seq = 'Z';\n\n            // }else{\n            //   this.hdmsDgrmList[i].seq = 'Z1';\n            //   // 부모값이 같은지 확인해서 같을시에는 별도 클레스 처리\n            //   if(this.hdmsDgrmList[i].seq == this.hdmsDgrmList[i - 1].seq){\n            //     this.hdmsDgrmList[i].typeClass = \"link_block\";\n            //   }\n            // }\n          }\n\n          // css용 클래스 객체 생성\n          if (this.hdmsDgrmList[i].seq.indexOf(\"Z\") == -1) {\n            this.hdmsDgrmList[i].typeClass = \"\";\n          }\n          // 자릿수 계산 (ex : '' = 0, '1' = 1, '11' = 2)\n          let tempNum = this.hdmsDgrmList[i].seq.length;\n          if (this.consultDgrmArray[tempNum] == undefined) {\n            // 값이 없을시 초기값 배열로 할당\n            this.consultDgrmArray[tempNum] = [];\n          }\n          // 받아온 데이터를 자릿수에 맞는 배열로 추가\n          this.consultDgrmArray[tempNum].push(this.hdmsDgrmList[i]);\n\n          // 현재 자리수의 배열 길이\n          let lenNum = this.consultDgrmArray[tempNum].length - 1;\n          // 자릿수가 2자리 이상이고, 배열의 2번째 항목일 때 처리하는 분기\n          if (tempNum > 1 && lenNum > 0) {\n            // 빈값 확인. error 방지용 분기\n            if (this.consultDgrmArray[tempNum][lenNum - 1].seq == undefined) {\n              // 0번제 데이터가 없음으로 이전 블록 공백은 0 == 추가될 값은 1 세팅 \n              beforeBlockArray = 1;\n            }\n            // 이전 블럭(부모값과)과 자리수가 같지 않을 때 - first_block 클래스 추가 (css 처리용)\n            else if (this.consultDgrmArray[tempNum][lenNum - 1].seq.slice(0, -1) != this.consultDgrmArray[tempNum][lenNum].seq.slice(0, -1)) {\n              this.hdmsDgrmList[i].typeClass = \"first_block\";\n              // 이전 블록 개수를 저장 후 반복문 처리\n              if (sameBlockCnt != 0) {\n                for (let j = 0; j < sameBlockCnt; j++) {\n                  // beforeBlockArray 부모 배열 이전 블록 위치에 공백 추가 \n                  this.consultDgrmArray[tempNum - 1].splice(beforeBlockArray, 0, {\n                    \"typeClass\": \"none\"\n                  });\n                }\n              }\n              // 루프가 끝났음으로 같은 블록값 초기화\n              sameBlockCnt = 0;\n              // 블록 처리가 하나 끝났음으로 이전 블록 처리값 증가\n              beforeBlockArray++;\n            } else {\n              // 이전 블록과 같은 값일때는 같은 블록값 증가\n              sameBlockCnt++;\n            }\n          }\n          // 현재 라인(같은 다차원 하위 배열 넘버) 공백 처리용. error 방지용 분기\n          if (this.consultDgrmArray[tempNum - 1] != undefined) {\n            // seq 2자리수부터 처리 진행 && error 방지용 분기\n            if (1 < tempNum && this.consultDgrmArray[tempNum - 1][lenNum] != undefined) {\n              // 현재 배열의 라인의 부모값과 부모 배열의 라인에 데이터가 일치하는지 확인하고 불일치의 경우 공백 처리\n              if (this.consultDgrmArray[tempNum][lenNum].seq.slice(0, -1) != this.consultDgrmArray[tempNum - 1][lenNum].seq) {\n                // 이전 블록이 없음으로 첫번째 first_block 처리 분기를 못탔을 것임으로 first_block class 추가\n                this.hdmsDgrmList[i].typeClass = \"first_block\";\n                // 현재의 부모값 - 같은 라인의 부모 배열 값 = 라인 차이 계산값\n                let cnt = 0;\n                if (this.consultDgrmArray[tempNum][lenNum].seq.slice(0, -1) == 'Z') {\n                  cnt = 1;\n                } else {\n                  cnt = (this.consultDgrmArray[tempNum][lenNum].seq.slice(0, -1) - this.consultDgrmArray[tempNum - 1][lenNum].seq) * 1;\n                }\n\n                // 공백 추가 위치 계산용 변수\n                let lenup = 0;\n                //  라인 차이 계산값만큼 공백 추가용 루프\n                for (let k = 0; k < cnt; k++) {\n                  this.consultDgrmArray[tempNum].splice(lenNum + lenup, 0, {\n                    \"typeClass\": \"none\"\n                  });\n                  beforeBlockArray++;\n                  // 블록 처리가 하나 끝났음으로 이전 블록 처리값 증가\n                  lenup++;\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    openConsultHdmsResultInfoPopup(item) {\n      if (item.seq != 'Z') {\n        let options = \"top=10, width=600, height=450, status=no, menubar=no, toolbar=no, resizable=no\";\n        window.open(\"/popup/ConsultHdmsResultInfoPopup?ttId=\" + item.ttId + \"&scn=\" + item.scn + \"&termlType=\" + item.termlType, \"ConsultHdmsResultInfoPopup\", options);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["name","data","consultDgrmArray","created","computed","hdmsDgrmList","$store","state","trouble","consultTarget","consult","methods","getHdmsDgrmList","item","ttId","currTtID","dispatch","then","length","getConsultDgrm","catch","error","console","log","beforeBlockArray","sameBlockCnt","i","seq","indexOf","newHdms","Object","assign","typeClass","termlType","splice","tempNum","undefined","push","lenNum","slice","j","cnt","lenup","k","openConsultHdmsResultInfoPopup","options","window","open","scn"],"sourceRoot":"","sources":["C:\\CSAI_Front\\src\\views\\pages\\consult\\ConsultNetDiagram.vue"],"sourcesContent":["<template>\r\n  <div class=\"group_item\">\r\n    <h1>댁내 망구성도</h1>\r\n    <!--ul class=\"case_info_st01\">\r\n      <li><span class=\"bg_st01\"></span>정상</li>\r\n      <li><span class=\"bg_st02\"></span>비정상</li>\r\n      <li><span class=\"bg_st03\"></span>상태없음</li>\r\n    </ul-->\r\n    <div class=\"diagram_box oy_s\">\r\n      <div class=\"net_diagram_no_data\" v-if=\"consultDgrmArray.length == 0\">\r\n        <p>망구성도 데이터가 없습니다.</p>\r\n      </div>\r\n      <div class=\"net_diagram\">\r\n        <ul v-for=\"(item1, idx) in consultDgrmArray\" :key=\"idx\">\r\n          <li v-for=\"(item2, idx1) in item1\" :key=\"idx1\" :class=\"item2.typeClass + ' ' + ((item2.typeClass == 'none') && (idx1 == 0) ? 'first_none' : '')\">\r\n            <span :class=\"'bg_type_' + item2.termlType\" @click=\"openConsultHdmsResultInfoPopup(item2)\" v-if=\"item2.typeClass != 'none'\">\r\n              {{ item2.seq == '' ? item2.termlType : '' }}\r\n              {{ item2.termlType == 'H' ? '홈허브' : '' }}\r\n              {{ item2.termlType == 'G' ? '기가지니' : '' }}\r\n              {{ item2.termlType == 'GA' ? '기가지니A' : '' }}\r\n              {{ item2.termlType == 'S' ? 'STB' : '' }}\r\n              {{ item2.termlType == 'E' ? '사설장치' : '' }}\r\n            </span>\r\n            <span v-if=\"item2.typeClass == 'none'\"></span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n  export default {\r\n    name: 'ConsultNetDiagram',\r\n    data() {\r\n      return {\r\n        consultDgrmArray : []\r\n      }\r\n    },\r\n    created() {\r\n\r\n    },\r\n    computed: {\r\n      hdmsDgrmList(){\r\n        return this.$store.state.trouble.hdmsDgrmList;\r\n      },\r\n      consultTarget() {\r\n      // 로그인 사용자 정보\r\n        return this.$store.state.consult.consultTarget;\r\n      },\r\n    },\r\n    methods: {\r\n      getHdmsDgrmList(){\r\n        this.consultDgrmArray = [];\r\n        let item = {\r\n          ttId : this.consultTarget.currTtID//localStorage.getItem('ttId')\r\n        }\r\n        this.$store.dispatch(\"trouble/hdmsDgrmList\", item).then(() => {\r\n          if((this.hdmsDgrmList).length > 0){\r\n            this.getConsultDgrm();\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      },\r\n      getConsultDgrm(){\r\n        \r\n        // 이전 블록 공백 계산용 (이전 블록 == 부모값이 다른 전 루프 데이터)\r\n        let beforeBlockArray = 1;\r\n        // 같은 부모 블록 계산용 (이전 블록 == 부모값이 다른 데이터)\r\n        let sameBlockCnt = 0;\r\n        // hdmsDgrmList -> consultDgrmArray UI용 데이터 배열 생성(자릿수로 push)\r\n        for(let i = 0; i < this.hdmsDgrmList.length; i++){\r\n          console.log(this.hdmsDgrmList[i].seq);\r\n          // seq가 null이 아닐때만 put\r\n          if(this.hdmsDgrmList[i].seq != null){\r\n            // 모뎀 세팅 (seq == 0)\r\n            if(this.hdmsDgrmList[i].seq == \"0\"){\r\n              // seq 삭제해서 자릿수 변경\r\n              this.hdmsDgrmList[i].seq = \"\";\r\n            }\r\n            // 사설장비 세팅\r\n            if(this.hdmsDgrmList[i].seq.indexOf(\"E\") >= 0){\r\n              // seq 삭제해서 자릿수 변경\r\n              //if(this.hdmsDgrmList[i].seq.substr(1).length < 2){\r\n                let newHdms = Object.assign({}, this.hdmsDgrmList[i]);\r\n                newHdms.seq = 'Z1'\r\n                newHdms.typeClass = \"first_block\";\r\n                this.hdmsDgrmList[i].termlType = \"E\";\r\n                this.hdmsDgrmList.splice(i + 1, 0, newHdms);\r\n                this.hdmsDgrmList[i].seq = 'Z';\r\n                \r\n              // }else{\r\n              //   this.hdmsDgrmList[i].seq = 'Z1';\r\n              //   // 부모값이 같은지 확인해서 같을시에는 별도 클레스 처리\r\n              //   if(this.hdmsDgrmList[i].seq == this.hdmsDgrmList[i - 1].seq){\r\n              //     this.hdmsDgrmList[i].typeClass = \"link_block\";\r\n              //   }\r\n              // }\r\n            }\r\n\r\n            // css용 클래스 객체 생성\r\n            if(this.hdmsDgrmList[i].seq.indexOf(\"Z\") == -1){\r\n              this.hdmsDgrmList[i].typeClass = \"\";\r\n            }\r\n            // 자릿수 계산 (ex : '' = 0, '1' = 1, '11' = 2)\r\n            let tempNum = this.hdmsDgrmList[i].seq.length;\r\n            if(this.consultDgrmArray[tempNum] == undefined){\r\n              // 값이 없을시 초기값 배열로 할당\r\n              this.consultDgrmArray[tempNum] = []\r\n            }\r\n            // 받아온 데이터를 자릿수에 맞는 배열로 추가\r\n            this.consultDgrmArray[tempNum].push(this.hdmsDgrmList[i]);\r\n\r\n            // 현재 자리수의 배열 길이\r\n            let lenNum = this.consultDgrmArray[tempNum].length  - 1;\r\n            // 자릿수가 2자리 이상이고, 배열의 2번째 항목일 때 처리하는 분기\r\n            if(tempNum > 1 && lenNum > 0){\r\n              // 빈값 확인. error 방지용 분기\r\n              if(this.consultDgrmArray[tempNum][lenNum - 1].seq == undefined){\r\n                // 0번제 데이터가 없음으로 이전 블록 공백은 0 == 추가될 값은 1 세팅 \r\n                beforeBlockArray = 1;\r\n              }\r\n              // 이전 블럭(부모값과)과 자리수가 같지 않을 때 - first_block 클래스 추가 (css 처리용)\r\n              else if((this.consultDgrmArray[tempNum][lenNum - 1].seq).slice(0, -1) != (this.consultDgrmArray[tempNum][lenNum].seq).slice(0, -1)){\r\n                this.hdmsDgrmList[i].typeClass = \"first_block\";\r\n                // 이전 블록 개수를 저장 후 반복문 처리\r\n                if(sameBlockCnt != 0){\r\n                  for(let j = 0; j < sameBlockCnt; j++){\r\n                    // beforeBlockArray 부모 배열 이전 블록 위치에 공백 추가 \r\n                    this.consultDgrmArray[tempNum - 1].splice(beforeBlockArray, 0, {\"typeClass\":\"none\"});        \r\n                  }\r\n                }\r\n                // 루프가 끝났음으로 같은 블록값 초기화\r\n                sameBlockCnt = 0;\r\n                // 블록 처리가 하나 끝났음으로 이전 블록 처리값 증가\r\n                beforeBlockArray++;\r\n              }else{\r\n                // 이전 블록과 같은 값일때는 같은 블록값 증가\r\n                sameBlockCnt++;\r\n              }\r\n\r\n            }\r\n            // 현재 라인(같은 다차원 하위 배열 넘버) 공백 처리용. error 방지용 분기\r\n            if(this.consultDgrmArray[tempNum - 1] != undefined){\r\n              // seq 2자리수부터 처리 진행 && error 방지용 분기\r\n              if(1 < tempNum && this.consultDgrmArray[tempNum - 1][lenNum] != undefined){\r\n                // 현재 배열의 라인의 부모값과 부모 배열의 라인에 데이터가 일치하는지 확인하고 불일치의 경우 공백 처리\r\n                if((this.consultDgrmArray[tempNum][lenNum].seq).slice(0, -1) != this.consultDgrmArray[tempNum - 1][lenNum].seq){\r\n                  // 이전 블록이 없음으로 첫번째 first_block 처리 분기를 못탔을 것임으로 first_block class 추가\r\n                  this.hdmsDgrmList[i].typeClass = \"first_block\";\r\n                  // 현재의 부모값 - 같은 라인의 부모 배열 값 = 라인 차이 계산값\r\n                  let cnt = 0;\r\n                  if((this.consultDgrmArray[tempNum][lenNum].seq).slice(0, -1) == 'Z'){\r\n                    cnt = 1\r\n                  }else{\r\n                    cnt = ((this.consultDgrmArray[tempNum][lenNum].seq).slice(0, -1) - this.consultDgrmArray[tempNum - 1][lenNum].seq) * 1 \r\n                  }\r\n                  \r\n                  // 공백 추가 위치 계산용 변수\r\n                  let lenup = 0;\r\n                  //  라인 차이 계산값만큼 공백 추가용 루프\r\n                  for(let k = 0; k < cnt; k++){\r\n                    this.consultDgrmArray[tempNum].splice(lenNum + lenup, 0, {\"typeClass\":\"none\"});\r\n                    beforeBlockArray++;\r\n                    // 블록 처리가 하나 끝났음으로 이전 블록 처리값 증가\r\n                    lenup++;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      openConsultHdmsResultInfoPopup(item){\r\n        if(item.seq != 'Z'){\r\n          let options = \"top=10, width=600, height=450, status=no, menubar=no, toolbar=no, resizable=no\";\r\n          window.open(\"/popup/ConsultHdmsResultInfoPopup?ttId=\"+ item.ttId + \"&scn=\" + item.scn + \"&termlType=\" + item.termlType, \"ConsultHdmsResultInfoPopup\", options);\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}