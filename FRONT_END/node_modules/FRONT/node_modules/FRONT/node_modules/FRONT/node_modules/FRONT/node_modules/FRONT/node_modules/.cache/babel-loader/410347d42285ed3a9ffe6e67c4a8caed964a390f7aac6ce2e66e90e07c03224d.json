{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/CSAI_Front/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es.array.push.js\");\nvar _webstompClient = _interopRequireDefault(require(\"webstomp-client\"));\nvar _sockjsClient = _interopRequireDefault(require(\"sockjs-client\"));\nvar _StringUtil = _interopRequireDefault(require(\"../../../utils/StringUtil\"));\nvar _default = {\n  name: 'ConsultChat',\n  emits: [\"getConsulting\", \"showImg\"],\n  data() {\n    return {\n      message: \"\",\n      recvList: [],\n      user_key: \"\",\n      imgPathUrl: \"\",\n      file_name: \"\",\n      isDragging: false,\n      reConnectCnt: 0,\n      reporterOpinion: \"\",\n      //신고내용\n      socketArray: [],\n      show_reservation: false,\n      reservationDate: [{\n        value: \"09:00\"\n      }, {\n        value: \"10:00\"\n      }, {\n        value: \"11:00\"\n      }, {\n        value: \"12:00\"\n      }, {\n        value: \"13:00\"\n      }, {\n        value: \"14:00\"\n      }, {\n        value: \"15:00\"\n      }, {\n        value: \"16:00\"\n      }, {\n        value: \"17:00\"\n      }],\n      errorTxt: \"\"\n    };\n  },\n  created() {\n    // this.connect()\n    // App.vue가 생성되면 소켓 연결을 시도합니다.\n  },\n  computed: {\n    roomInfo() {\n      return this.$store.state.alarm.roomInfo;\n    },\n    //----------------------------------\n    // 고장접수 정보\n    //----------------------------------\n    accptInfo() {\n      return this.$store.state.trouble.accptInfo;\n    },\n    userInfo() {\n      // 로그인 사용자 정보\n      return this.$store.state.auth.userInfo;\n    },\n    consultHist() {\n      return this.$store.state.consult.consultHist;\n    },\n    consultTarget() {\n      // 로그인 사용자 정보\n      return this.$store.state.consult.consultTarget;\n    },\n    consultStatus() {\n      return this.$store.state.consult.consultStatus;\n    }\n  },\n  methods: {\n    // 메시지 전송\n    sendMessage(item1) {\n      this.consultTarget.currConsultId = item1.consult_id;\n      // #TODO 이 부분에 유효성 검증 처리가 들어가야 함\n      // 서버로 요청하기전에 1차적인 검증 필요 부분\n      // #TODO 메시지 공격 부분도 처리 필요할 수도 있음. 디테일 한 부분\n      if (this.message.length > 1000) {\n        alert(\"1000글자 이하로 작성 가능합니다. (\" + this.message.length + \"/1000)\");\n        return;\n      }\n      if (this.message !== '') {\n        this.sendConsultTalk();\n      }\n    },\n    sendConsultTalk() {\n      console.log(\"보내는 메시지 : \" + this.messageTemplet(\"TX\"));\n      //if (this.consultTarget.socketArray[this.consultTarget.currTargetIdx] && this.consultTarget.socketArray[this.consultTarget.currTargetIdx].connected) {\n      this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"TX\"), {});\n      this.message = '';\n      //}else{\n      // #TODO 소캣 정보가 없을시 연결에 대한 오류 처리\n      //}\n    },\n\n    showImg(value, type) {\n      console.log(value);\n      this.$emit('showImg', value, type);\n    },\n    // 보내는 메시지 json 공통화\n    messageTemplet(msgType) {\n      // eslint-disable-next-line \n      //debugger;\n      console.log(msgType);\n      const msg = {\n        consult_id: this.consultTarget.currConsultId,\n        user_key: this.consultTarget.currUserKey,\n        sender_type: \"CS\",\n        content: this.message,\n        content_type: msgType,\n        file_name: this.file_name\n      };\n      return JSON.stringify(msg);\n    },\n    // #COMMON : 이미지 변환에 대한 공통 함수 처리 필요\n    toDataURL(url, callback) {\n      let xhr = new XMLHttpRequest();\n      xhr.onload = function () {\n        let reader = new FileReader();\n        reader.onloadend = function () {\n          // 처리 된 후에 작동하도록 collback 처리. result에서 첫번째 , 까지 제거하는 처리 필요 . 기본 타입은 UI에서 제어\n          callback(reader.result);\n        };\n        reader.readAsDataURL(xhr.response);\n      };\n      // blob 방식으로 변환 - Base64\n      xhr.open('GET', url);\n      xhr.responseType = 'blob';\n      xhr.send();\n    },\n    sendImg(imgUrl, imgType, imgType2) {\n      if (this.consultTarget.cnvrst_sttus != 'A') {\n        alert(\"상담이 시작되지 않았음으로 이미지 전송이 불가합니다.\\n상담이 시작된 후 전송해 주세요\");\n      } else {\n        if (imgType == 'IM-RESEND') {\n          this.file_name = imgUrl.substr(5);\n          this.message = imgUrl;\n          this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"IM\"), {});\n          this.file_name = \"\";\n          this.message = \"\";\n        } else {\n          this.file_name = imgUrl + imgType2;\n          this.message = '/nas/' + imgUrl + imgType2;\n          this.consultTarget.socketArray[0].send(\"/pub/message\", this.messageTemplet(\"IM\"), {});\n          this.file_name = \"\";\n          this.message = \"\";\n        }\n      }\n    },\n    uploadImage(input) {\n      if (input.files && input.files[0]) {\n        console.log(\"input\");\n        let reader = new FileReader();\n        let self = this;\n        reader.onload = function (e) {\n          self.toDataURL(e.target.result, function (dataUrl) {\n            let fileBlock = dataUrl.split(\",\");\n            console.log(dataUrl);\n            self.file_name = fileBlock[0];\n            self.message = fileBlock[1];\n            self.consultTarget.socketArray[0].send(\"/pub/message\", self.messageTemplet(\"IM-BASE64\"), {});\n            self.file_name = \"\";\n            self.message = \"\";\n            self.isDragging = false;\n          });\n        };\n        reader.readAsDataURL(input.files[0]);\n      } else {\n        console.log(\"input?\");\n      }\n    },\n    dropInputTag(e) {\n      let file = Array.from(e.dataTransfer.files, v => v)[0];\n      this.$refs.image.files = e.dataTransfer.files;\n      //this.uploadImage(file);\n      console.log(file);\n      if (this.consultTarget.cnvrst_sttus != 'A') {\n        alert(\"상담이 시작되지 않았음으로 이미지 전송이 불가합니다.\\n상담이 시작된 후 전송해 주세요\");\n        this.isDragging = false;\n        //#TODO 3MB 스트림방식으로 보냈을떄 증가하는 값 고려 - 소캣, 복호화 관련해서 수호씨한테 질문\n      } else if (file.size > 2560224) {\n        alert(\"3MB 넘는 파일은 전송하실 수 없습니다.\");\n        this.isDragging = false;\n      } else {\n        this.file_name = file.name;\n        this.uploadImage(this.$refs.image);\n        console.log(file);\n        this.isDragging = false;\n      }\n    },\n    dragover() {\n      this.isDragging = true;\n    },\n    dragleave() {\n      this.isDragging = false;\n    },\n    connect() {\n      const serverURL = process.env.VUE_APP_API_URL + \"/web-socket\";\n      let socket = new _sockjsClient.default(serverURL);\n      this.stompClient = _webstompClient.default.over(socket);\n      this.consultTarget.consultArray[0].consult_id;\n      this.consultTarget.currConsultId = this.consultTarget.consultArray[0].consult_id;\n      this.consultTarget.socketArray.unshift(_webstompClient.default.over(socket));\n      console.log(`소켓 연결을 시도. 서버 주소: ${serverURL}`);\n      this.consultTarget.socketArray[0].connect({}, frame => {\n        // 소켓 연결 성공\n        this.connected = true;\n        console.log('소켓 연결 성공 : ' + frame);\n        this.consultTarget.socketArray[0].subscribe(\"/sub/consult/\" + this.consultTarget.consultArray[0].consult_id, res => {\n          // 현재 id가 아닐 경우에만 class 추가 = connect는 0고정\n          if (document.getElementById('consult_id_0') != null) {\n            if (0 != this.consultTarget.currTargetIdx) {\n              document.getElementById('consult_id_0').classList.add(\"new\");\n            }\n          }\n          console.log('받은 메시지 : ' + res.body);\n          // 서버에서 받아온 메시지를 JSON 형식으로 변환해서 화면에 세팅\n          // #TODO 메시지 암호화 처리 들어가면 이부분에서 복호화 필요\n          let reiveMessge = JSON.parse(res.body);\n          console.log(reiveMessge);\n\n          // 최초 메시지 수신시(reference) user_Key 세팅 : user_key로 수신, 발신 구분\n          if (this.consultTarget.consultArray[0].cnvrst_sttus == 'W') {\n            this.consultTarget.consultArray[0].cnvrst_sttus = 'A';\n            this.consultTarget.cnvrst_sttus = 'A';\n            this.consultTarget.currUserKey = reiveMessge.user_key;\n            this.$forceUpdate();\n          }\n          this.consultTarget.reiveMessgeArray[0].push(reiveMessge);\n          // 스크롤 갱신 처리 : 처리 지연 개선 필요. DOM 기준으로 변경\n          setTimeout(function () {\n            let chat_box = document.getElementById(\"chat_box_0\");\n            chat_box.scrollTop = chat_box.scrollHeight;\n          }, 300);\n        });\n      }, error => {\n        // 소켓 연결 실패\n        console.log('소켓 연결 실패', error);\n        this.consultTarget.socketArray[0].connect();\n        this.connected = false;\n        if (this.reConnectCnt < 5) {\n          this.reConnectCnt = this.reConnectCnt + 1;\n          this.connect();\n        } else {\n          alert(\"재연결 5회 실패 - api 서버 연결 안됨\");\n          console.log('소켓 연결 5회 실패', error);\n        }\n        //this.connect();\n      });\n    },\n\n    reConnect(item, idx) {\n      const serverURL = process.env.VUE_APP_API_URL + \"/web-socket?idx=\" + idx;\n      this.user_key = item.user_key;\n      this.roomInfo.consult_id = item.consult_id;\n      //this.consultStatus = item.cnvrst_sttus;\n      //this.accptInfo.userName = item.cust_nm;\n      let socket = new _sockjsClient.default(serverURL);\n      this.consultTarget.socketArray.push(_webstompClient.default.over(socket));\n      //this.stompClient = Stomp.over(socket);\n      console.log(`소켓 재연결을 시도. 서버 주소: ${serverURL}`);\n      //let chat_box = document.getElementById(\"chat_box\");\n      //chat_box.scrollTop = chat_box.scrollHeight;\n\n      this.consultTarget.socketArray[idx].connect({}, frame => {\n        // 소켓 연결 성공\n        this.connected = true;\n        console.log('소켓 재연결 성공 : ' + frame + \"/\" + item.consult_id);\n        this.consultTarget.socketArray[idx].subscribe(\"/sub/consult/\" + item.consult_id, res => {\n          if (document.getElementById('consult_id_' + item.id) != null) {\n            if (item.id != this.consultTarget.currTargetIdx) {\n              document.getElementById('consult_id_' + item.id).classList.add(\"new\");\n            }\n          }\n          console.log('받은 메시지 :' + res.body);\n\n          // 서버에서 받아온 메시지를 JSON 형식으로 변환해서 화면에 세팅\n          // #TODO 메시지 암호화 처리 들어가면 이부분에서 복호화 필요\n          let reiveMessge = JSON.parse(res.body);\n          console.log(reiveMessge);\n          /*if(reiveMessge.user_key != '' && this.user_key == ''){\r\n            this.user_key = reiveMessge.user_key;\r\n            this.recvList.push(reiveMessge);\r\n          }else{\r\n            this.recvList.push(reiveMessge);\r\n          }*/\n\n          // 최초 메시지 수신시(reference) user_Key 세팅 : user_key로 수신, 발신 구분\n          if (this.consultTarget.consultArray[idx].cnvrst_sttus == 'W') {\n            this.consultTarget.consultArray[idx].cnvrst_sttus = 'A';\n            this.consultTarget.cnvrst_sttus = 'A';\n            this.consultTarget.currUserKey = reiveMessge.user_key;\n            this.$forceUpdate();\n          }\n          this.consultTarget.reiveMessgeArray[idx].push(reiveMessge);\n          //this.recvList.push(reiveMessge);\n          // 스크롤 갱신 처리 : 처리 지연 개선 필요. DOM 기준으로 변경\n          setTimeout(function () {\n            let chat_box = document.getElementById(\"chat_box_\" + item.id);\n            chat_box.scrollTop = chat_box.scrollHeight;\n          }, 300);\n        });\n      }, error => {\n        // 소켓 연결 실패\n        console.log('소켓 연결 실패', error);\n        this.consultTarget.socketArray[idx].connect();\n        this.connected = false;\n        if (this.reConnectCnt < 5) {\n          this.reConnectCnt = this.reConnectCnt + 1;\n          this.connect();\n        } else {\n          alert(\"재연결 5회 실패 - api 서버 연결 안됨\");\n          console.log('소켓 연결 5회 실패', error);\n        }\n        //this.connect();\n      });\n    },\n\n    showReservation(item) {\n      this.show_reservation = true;\n      this.consultTarget.currConsultId = item.consult_id;\n      this.consultTarget.currUserKey = item.user_key;\n      var now = new Date();\n      var year = now.getFullYear();\n      var month = now.getMonth() + 1;\n      var day = now.getDate();\n      if (day < 9) {\n        day = \"0\" + day; //이번달\n      }\n\n      if (month < 9) {\n        month = \"0\" + month;\n      }\n      document.getElementById(\"reservation_date\").value = year + \"-\" + month + \"-\" + day;\n    },\n    closeReservation() {\n      this.errorTxt = \"\";\n      this.show_reservation = false;\n    },\n    setConsultReservation() {\n      let reservation_date = document.getElementById(\"reservation_date\").value;\n      if (reservation_date == \"\") {\n        this.errorTxt = \"예약일을 입력해주세요.\";\n        return;\n      }\n      this.errorTxt = \"\";\n      let reservation_time = document.getElementById(\"reservation_time\").value;\n      let rsv_time = reservation_date + \" \" + reservation_time;\n      if (confirm(rsv_time + \"로 예약 하시겠습니까? 예약시 상담이 종료됩니다.\")) {\n        let payload = {\n          tt_id: this.consultTarget.currTtID,\n          //this.roomInfo.consult_id,\n          status: 'reservation',\n          rsv_time: reservation_date + \"T\" + reservation_time + \":00\"\n        };\n        this.$store.dispatch(\"consult/consultReservation\", payload).then(() => {\n          // this.$emit('getConsulting');\n          let payload = {\n            consult_id: this.consultTarget.currConsultId,\n            //this.roomInfo.consult_id,\n            status: 'done',\n            user_key: this.consultTarget.currUserKey //this.user_key\n          };\n\n          this.$store.dispatch(\"consult/consultStatus\", payload).then(() => {\n            this.consultTarget.consultArray = [];\n            alert(\"상담이 예약되었습니다.\");\n            this.$router.push({\n              path: '/alarm'\n            });\n          }).catch(error => {\n            console.log(error);\n          });\n        }).catch(error => {\n          console.log(error);\n          this.errorTxt = \"시스템 에러입니다.\";\n        });\n      }\n    },\n    setConsultStatus(item, type, idx) {\n      let setStatus = 'pending';\n      if (type == 2) {\n        setStatus = 'done';\n      } else if (item.cnvrst_sttus == 'S') {\n        setStatus = 'consulting';\n      }\n      let payload = {\n        consult_id: item.consult_id,\n        //this.roomInfo.consult_id,\n        status: setStatus,\n        user_key: item.user_key //this.user_key\n      };\n\n      this.$store.dispatch(\"consult/consultStatus\", payload).then(() => {\n        //this.consultStatus = status;\n        //\n        // this.consultTarget.currTargetIdx = item.id;\n        //\n        this.consultTarget.cnvrst_sttus = this.consultStatus.cnvrst_sttus;\n        if (this.consultTarget.cnvrst_sttus == 'D') {\n          this.consultTarget.consultArray = [];\n          // this.$emit('getConsulting');\n          alert(\"상담이 완료되었습니다.\");\n          this.$router.push({\n            path: '/alarm'\n          });\n        } else {\n          this.consultTarget.consultArray[idx].cnvrst_sttus = this.consultStatus.cnvrst_sttus;\n        }\n        this.$forceUpdate();\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    StringUtil() {\n      var obj = _StringUtil.default;\n      return obj;\n    }\n  },\n  mounted() {\n    // list는 있으나 선택된 값이 없을 시 0번째 값 선택\n    if (this.consultTarget.currTargetIdx == '' && this.consultTarget.consultArray.length != 0) {\n      this.consultTarget.currTargetIdx = this.consultTarget.consultArray[0].id;\n      this.$forceUpdate();\n    }\n  }\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}