{"ast":null,"code":"/* eslint-disable */\n\nvar Arcfour = require('./prng4');\nconst SecureRandom = function () {\n  'use strict';\n\n  var rng_state;\n  var rng_pool;\n  var rng_pptr;\n  var rng_psize = 256;\n\n  // Mix in a 32-bit integer into the pool\n  function rng_seed_int(x) {\n    rng_pool[rng_pptr++] ^= x & 255;\n    rng_pool[rng_pptr++] ^= x >> 8 & 255;\n    rng_pool[rng_pptr++] ^= x >> 16 & 255;\n    rng_pool[rng_pptr++] ^= x >> 24 & 255;\n    if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n  }\n\n  // Mix in the current time (w/milliseconds) into the pool\n  function rng_seed_time() {\n    rng_seed_int(new Date().getTime());\n  }\n\n  // Initialize the pool with junk if needed.\n  if (rng_pool == null) {\n    rng_pool = new Array();\n    rng_pptr = 0;\n    var t;\n    if (typeof window !== 'undefined' && navigator.appName == 'Netscape' && navigator.appVersion < '5' && window.crypto) {\n      // Extract entropy (256 bits) from NS4 RNG if available\n      var z = window.crypto.random(32);\n      for (t = 0; t < z.length; ++t) {\n        rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n      }\n    }\n    while (rng_pptr < rng_psize) {\n      // extract some randomness from Math.random()\n      t = Math.floor(65536 * Math.random());\n      rng_pool[rng_pptr++] = t >>> 8;\n      rng_pool[rng_pptr++] = t & 255;\n    }\n    rng_pptr = 0;\n    rng_seed_time();\n    // rng_seed_int(window.screenX);\n    // rng_seed_int(window.screenY);\n  }\n\n  function rng_get_byte() {\n    if (rng_state == null) {\n      rng_seed_time();\n      rng_state = Arcfour; // prng_newstate();\n      rng_state.init(rng_pool);\n      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\n        rng_pool[rng_pptr] = 0;\n      }\n      rng_pptr = 0;\n      // rng_pool = null;\n    }\n    // TODO: allow reseeding after first request\n    return rng_state.next();\n  }\n  function rng_get_bytes(ba) {\n    var i;\n    for (i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n  }\n  function SecureRandom() {}\n  SecureRandom.prototype.nextBytes = rng_get_bytes;\n  return SecureRandom;\n}();\nconsole.log('SecureRandom', SecureRandom);\nif (typeof module === 'object' && module.exports) {\n  module.exports = SecureRandom;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}