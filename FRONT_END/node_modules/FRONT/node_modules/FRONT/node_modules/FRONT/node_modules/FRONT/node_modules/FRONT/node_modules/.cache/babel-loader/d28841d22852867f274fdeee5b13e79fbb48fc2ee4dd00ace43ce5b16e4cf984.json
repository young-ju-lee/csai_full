{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"group_item\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"댁내 망구성도\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"diagram_box oy_s\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"net_diagram_no_data\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"p\", null, \"망구성도 데이터가 없습니다.\", -1 /* HOISTED */);\nconst _hoisted_6 = [_hoisted_5];\nconst _hoisted_7 = {\n  class: \"net_diagram\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\"ul class=\\\"case_info_st01\\\">\\r\\n      <li><span class=\\\"bg_st01\\\"></span>정상</li>\\r\\n      <li><span class=\\\"bg_st02\\\"></span>비정상</li>\\r\\n      <li><span class=\\\"bg_st03\\\"></span>상태없음</li>\\r\\n    </ul\"), _createElementVNode(\"div\", _hoisted_3, [$data.consultDgrmArray.length == 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _hoisted_6)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.consultDgrmArray, (item1, idx) => {\n    return _openBlock(), _createElementBlock(\"ul\", {\n      key: idx\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(item1, (item2, idx1) => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: idx1,\n        class: _normalizeClass(item2.typeClass + ' ' + (item2.typeClass == 'none' && idx1 == 0 ? 'first_none' : ''))\n      }, [item2.typeClass != 'none' ? (_openBlock(), _createElementBlock(\"span\", {\n        key: 0,\n        class: _normalizeClass('bg_type_' + item2.termlType),\n        onClick: $event => $options.openConsultHdmsResultInfoPopup(item2)\n      }, _toDisplayString(item2.seq == '' ? item2.termlType : '') + \" \" + _toDisplayString(item2.termlType == 'H' ? '홈허브' : '') + \" \" + _toDisplayString(item2.termlType == 'G' ? '기가지니' : '') + \" \" + _toDisplayString(item2.termlType == 'GA' ? '기가지니A' : '') + \" \" + _toDisplayString(item2.termlType == 'S' ? 'STB' : '') + \" \" + _toDisplayString(item2.termlType == 'E' ? '사설장치' : ''), 11 /* TEXT, CLASS, PROPS */, _hoisted_8)) : _createCommentVNode(\"v-if\", true), item2.typeClass == 'none' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_9)) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAY;gCACrBC,oBAAgB,YAAZ,SAAO;;EAMND,KAAK,EAAC;AAAkB;;;EACtBA,KAAK,EAAC;;gCACTC,oBAAsB,WAAnB,iBAAe;oBAAlBC,UAAsB;;EAEnBF,KAAK,EAAC;AAAa;;;;;;uBAX5BG,oBA2BM,OA3BNC,UA2BM,GA1BJC,UAAgB,EAChBC,8NAIO,EACPL,oBAmBM,OAnBNM,UAmBM,GAlBmCC,sBAAgB,CAACC,MAAM,uBAA9DN,oBAEM,OAFNO,UAEM,oDACNT,oBAcM,OAdNU,UAcM,sBAbJR,oBAYKS,6BAZsBJ,sBAAgB,GAA/BK,KAAK,EAAEC,GAAG;yBAAtBX,oBAYK;MAZyCY,GAAG,EAAED;IAAG,uBACpDX,oBAUKS,6BAVuBC,KAAK,GAArBG,KAAK,EAAEC,IAAI;2BAAvBd,oBAUK;QAV+BY,GAAG,EAAEE,IAAI;QAAGjB,KAAK,kBAAEgB,KAAK,CAACE,SAAS,UAAWF,KAAK,CAACE,SAAS,cAAgBD,IAAI;UACjBD,KAAK,CAACE,SAAS,4BAAhHf,oBAOO;;QAPAH,KAAK,+BAAegB,KAAK,CAACG,SAAS;QAAGC,OAAK,YAAEC,uCAA8B,CAACL,KAAK;0BACnFA,KAAK,CAACM,GAAG,SAASN,KAAK,CAACG,SAAS,SAAQ,GAC5C,oBAAGH,KAAK,CAACG,SAAS,wBAAuB,GACzC,oBAAGH,KAAK,CAACG,SAAS,yBAAwB,GAC1C,oBAAGH,KAAK,CAACG,SAAS,2BAA0B,GAC5C,oBAAGH,KAAK,CAACG,SAAS,wBAAuB,GACzC,oBAAGH,KAAK,CAACG,SAAS,uGAERH,KAAK,CAACE,SAAS,4BAA3Bf,oBAA8C","names":["class","_createElementVNode","_hoisted_5","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode","_hoisted_3","$data","length","_hoisted_4","_hoisted_7","_Fragment","item1","idx","key","item2","idx1","typeClass","termlType","onClick","$options","seq"],"sourceRoot":"","sources":["C:\\CSAI_Front\\src\\views\\pages\\consult\\ConsultNetDiagram.vue"],"sourcesContent":["<template>\r\n  <div class=\"group_item\">\r\n    <h1>댁내 망구성도</h1>\r\n    <!--ul class=\"case_info_st01\">\r\n      <li><span class=\"bg_st01\"></span>정상</li>\r\n      <li><span class=\"bg_st02\"></span>비정상</li>\r\n      <li><span class=\"bg_st03\"></span>상태없음</li>\r\n    </ul-->\r\n    <div class=\"diagram_box oy_s\">\r\n      <div class=\"net_diagram_no_data\" v-if=\"consultDgrmArray.length == 0\">\r\n        <p>망구성도 데이터가 없습니다.</p>\r\n      </div>\r\n      <div class=\"net_diagram\">\r\n        <ul v-for=\"(item1, idx) in consultDgrmArray\" :key=\"idx\">\r\n          <li v-for=\"(item2, idx1) in item1\" :key=\"idx1\" :class=\"item2.typeClass + ' ' + ((item2.typeClass == 'none') && (idx1 == 0) ? 'first_none' : '')\">\r\n            <span :class=\"'bg_type_' + item2.termlType\" @click=\"openConsultHdmsResultInfoPopup(item2)\" v-if=\"item2.typeClass != 'none'\">\r\n              {{ item2.seq == '' ? item2.termlType : '' }}\r\n              {{ item2.termlType == 'H' ? '홈허브' : '' }}\r\n              {{ item2.termlType == 'G' ? '기가지니' : '' }}\r\n              {{ item2.termlType == 'GA' ? '기가지니A' : '' }}\r\n              {{ item2.termlType == 'S' ? 'STB' : '' }}\r\n              {{ item2.termlType == 'E' ? '사설장치' : '' }}\r\n            </span>\r\n            <span v-if=\"item2.typeClass == 'none'\"></span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n  export default {\r\n    name: 'ConsultNetDiagram',\r\n    data() {\r\n      return {\r\n        consultDgrmArray : []\r\n      }\r\n    },\r\n    created() {\r\n\r\n    },\r\n    computed: {\r\n      hdmsDgrmList(){\r\n        return this.$store.state.trouble.hdmsDgrmList;\r\n      },\r\n      consultTarget() {\r\n      // 로그인 사용자 정보\r\n        return this.$store.state.consult.consultTarget;\r\n      },\r\n    },\r\n    methods: {\r\n      getHdmsDgrmList(){\r\n        this.consultDgrmArray = [];\r\n        let item = {\r\n          ttId : this.consultTarget.currTtID//localStorage.getItem('ttId')\r\n        }\r\n        this.$store.dispatch(\"trouble/hdmsDgrmList\", item).then(() => {\r\n          if((this.hdmsDgrmList).length > 0){\r\n            this.getConsultDgrm();\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      },\r\n      getConsultDgrm(){\r\n        \r\n        // 이전 블록 공백 계산용 (이전 블록 == 부모값이 다른 전 루프 데이터)\r\n        let beforeBlockArray = 1;\r\n        // 같은 부모 블록 계산용 (이전 블록 == 부모값이 다른 데이터)\r\n        let sameBlockCnt = 0;\r\n        // hdmsDgrmList -> consultDgrmArray UI용 데이터 배열 생성(자릿수로 push)\r\n        for(let i = 0; i < this.hdmsDgrmList.length; i++){\r\n          console.log(this.hdmsDgrmList[i].seq);\r\n          // seq가 null이 아닐때만 put\r\n          if(this.hdmsDgrmList[i].seq != null){\r\n            // 모뎀 세팅 (seq == 0)\r\n            if(this.hdmsDgrmList[i].seq == \"0\"){\r\n              // seq 삭제해서 자릿수 변경\r\n              this.hdmsDgrmList[i].seq = \"\";\r\n            }\r\n            // 사설장비 세팅\r\n            if(this.hdmsDgrmList[i].seq.indexOf(\"E\") >= 0){\r\n              // seq 삭제해서 자릿수 변경\r\n              //if(this.hdmsDgrmList[i].seq.substr(1).length < 2){\r\n                let newHdms = Object.assign({}, this.hdmsDgrmList[i]);\r\n                newHdms.seq = 'Z1'\r\n                newHdms.typeClass = \"first_block\";\r\n                this.hdmsDgrmList[i].termlType = \"E\";\r\n                this.hdmsDgrmList.splice(i + 1, 0, newHdms);\r\n                this.hdmsDgrmList[i].seq = 'Z';\r\n                \r\n              // }else{\r\n              //   this.hdmsDgrmList[i].seq = 'Z1';\r\n              //   // 부모값이 같은지 확인해서 같을시에는 별도 클레스 처리\r\n              //   if(this.hdmsDgrmList[i].seq == this.hdmsDgrmList[i - 1].seq){\r\n              //     this.hdmsDgrmList[i].typeClass = \"link_block\";\r\n              //   }\r\n              // }\r\n            }\r\n\r\n            // css용 클래스 객체 생성\r\n            if(this.hdmsDgrmList[i].seq.indexOf(\"Z\") == -1){\r\n              this.hdmsDgrmList[i].typeClass = \"\";\r\n            }\r\n            // 자릿수 계산 (ex : '' = 0, '1' = 1, '11' = 2)\r\n            let tempNum = this.hdmsDgrmList[i].seq.length;\r\n            if(this.consultDgrmArray[tempNum] == undefined){\r\n              // 값이 없을시 초기값 배열로 할당\r\n              this.consultDgrmArray[tempNum] = []\r\n            }\r\n            // 받아온 데이터를 자릿수에 맞는 배열로 추가\r\n            this.consultDgrmArray[tempNum].push(this.hdmsDgrmList[i]);\r\n\r\n            // 현재 자리수의 배열 길이\r\n            let lenNum = this.consultDgrmArray[tempNum].length  - 1;\r\n            // 자릿수가 2자리 이상이고, 배열의 2번째 항목일 때 처리하는 분기\r\n            if(tempNum > 1 && lenNum > 0){\r\n              // 빈값 확인. error 방지용 분기\r\n              if(this.consultDgrmArray[tempNum][lenNum - 1].seq == undefined){\r\n                // 0번제 데이터가 없음으로 이전 블록 공백은 0 == 추가될 값은 1 세팅 \r\n                beforeBlockArray = 1;\r\n              }\r\n              // 이전 블럭(부모값과)과 자리수가 같지 않을 때 - first_block 클래스 추가 (css 처리용)\r\n              else if((this.consultDgrmArray[tempNum][lenNum - 1].seq).slice(0, -1) != (this.consultDgrmArray[tempNum][lenNum].seq).slice(0, -1)){\r\n                this.hdmsDgrmList[i].typeClass = \"first_block\";\r\n                // 이전 블록 개수를 저장 후 반복문 처리\r\n                if(sameBlockCnt != 0){\r\n                  for(let j = 0; j < sameBlockCnt; j++){\r\n                    // beforeBlockArray 부모 배열 이전 블록 위치에 공백 추가 \r\n                    this.consultDgrmArray[tempNum - 1].splice(beforeBlockArray, 0, {\"typeClass\":\"none\"});        \r\n                  }\r\n                }\r\n                // 루프가 끝났음으로 같은 블록값 초기화\r\n                sameBlockCnt = 0;\r\n                // 블록 처리가 하나 끝났음으로 이전 블록 처리값 증가\r\n                beforeBlockArray++;\r\n              }else{\r\n                // 이전 블록과 같은 값일때는 같은 블록값 증가\r\n                sameBlockCnt++;\r\n              }\r\n\r\n            }\r\n            // 현재 라인(같은 다차원 하위 배열 넘버) 공백 처리용. error 방지용 분기\r\n            if(this.consultDgrmArray[tempNum - 1] != undefined){\r\n              // seq 2자리수부터 처리 진행 && error 방지용 분기\r\n              if(1 < tempNum && this.consultDgrmArray[tempNum - 1][lenNum] != undefined){\r\n                // 현재 배열의 라인의 부모값과 부모 배열의 라인에 데이터가 일치하는지 확인하고 불일치의 경우 공백 처리\r\n                if((this.consultDgrmArray[tempNum][lenNum].seq).slice(0, -1) != this.consultDgrmArray[tempNum - 1][lenNum].seq){\r\n                  // 이전 블록이 없음으로 첫번째 first_block 처리 분기를 못탔을 것임으로 first_block class 추가\r\n                  this.hdmsDgrmList[i].typeClass = \"first_block\";\r\n                  // 현재의 부모값 - 같은 라인의 부모 배열 값 = 라인 차이 계산값\r\n                  let cnt = 0;\r\n                  if((this.consultDgrmArray[tempNum][lenNum].seq).slice(0, -1) == 'Z'){\r\n                    cnt = 1\r\n                  }else{\r\n                    cnt = ((this.consultDgrmArray[tempNum][lenNum].seq).slice(0, -1) - this.consultDgrmArray[tempNum - 1][lenNum].seq) * 1 \r\n                  }\r\n                  \r\n                  // 공백 추가 위치 계산용 변수\r\n                  let lenup = 0;\r\n                  //  라인 차이 계산값만큼 공백 추가용 루프\r\n                  for(let k = 0; k < cnt; k++){\r\n                    this.consultDgrmArray[tempNum].splice(lenNum + lenup, 0, {\"typeClass\":\"none\"});\r\n                    beforeBlockArray++;\r\n                    // 블록 처리가 하나 끝났음으로 이전 블록 처리값 증가\r\n                    lenup++;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      openConsultHdmsResultInfoPopup(item){\r\n        if(item.seq != 'Z'){\r\n          let options = \"top=10, width=600, height=450, status=no, menubar=no, toolbar=no, resizable=no\";\r\n          window.open(\"/popup/ConsultHdmsResultInfoPopup?ttId=\"+ item.ttId + \"&scn=\" + item.scn + \"&termlType=\" + item.termlType, \"ConsultHdmsResultInfoPopup\", options);\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}