{"ast":null,"code":"/* eslint-disable */\nvar BigInteger = require('./jsbn');\nvar SecureRandom = require('./rng');\nvar rsa = function () {\n  'use strict';\n\n  // convert a (hex) string to a bignum object\n  function parseBigInt(str, r) {\n    return new BigInteger(str, r);\n  }\n  /*\r\n  function linebrk(s,n) {\r\n    var ret = \"\";\r\n    var i = 0;\r\n    while(i + n < s.length) {\r\n      ret += s.substring(i,i+n) + \"\\n\";\r\n      i += n;\r\n    }\r\n    return ret + s.substring(i,s.length);\r\n  }\r\n    function byte2Hex(b) {\r\n    if(b < 0x10)\r\n      return \"0\" + b.toString(16);\r\n    else\r\n      return b.toString(16);\r\n  }\r\n  */\n\n  // PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\n  function pkcs1pad2(s, n) {\n    if (n < s.length + 11) {\n      // TODO: fix for utf-8\n      alert('Message too long for RSA');\n      return null;\n    }\n    var ba = new Array();\n    var i = s.length - 1;\n    while (i >= 0 && n > 0) {\n      var c = s.charCodeAt(i--);\n      if (c < 128) {\n        // encode using utf-8\n        ba[--n] = c;\n      } else if (c > 127 && c < 2048) {\n        ba[--n] = c & 63 | 128;\n        ba[--n] = c >> 6 | 192;\n      } else {\n        ba[--n] = c & 63 | 128;\n        ba[--n] = c >> 6 & 63 | 128;\n        ba[--n] = c >> 12 | 224;\n      }\n    }\n    ba[--n] = 0;\n    var rng = new SecureRandom();\n    var x = new Array();\n    while (n > 2) {\n      // random non-zero pad\n      x[0] = 0;\n      while (x[0] == 0) rng.nextBytes(x);\n      ba[--n] = x[0];\n    }\n    ba[--n] = 2;\n    ba[--n] = 0;\n    return new BigInteger(ba);\n  }\n\n  // \"empty\" RSA key constructor\n  function RSAKey() {\n    this.n = null;\n    this.e = 0;\n    this.d = null;\n    this.p = null;\n    this.q = null;\n    this.dmp1 = null;\n    this.dmq1 = null;\n    this.coeff = null;\n  }\n\n  // Set the public key fields N and e from hex strings\n  function RSASetPublic(N, E) {\n    if (N != null && E != null && N.length > 0 && E.length > 0) {\n      this.n = parseBigInt(N, 16);\n      this.e = parseInt(E, 16);\n    } else {\n      console.log('Invalid RSA public key');\n    }\n  }\n\n  // Perform raw public operation on \"x\": return x^e (mod n)\n  function RSADoPublic(x) {\n    return x.constructor === BigInteger ? x.modPowInt(this.e, this.n) : '';\n  }\n\n  // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\n  function RSAEncrypt(text) {\n    var m = pkcs1pad2(text, this.n.bitLength() + 7 >> 3);\n    if (m == null) return null;\n    var c = this.doPublic(m);\n    if (c == null) return null;\n    var h = c.toString(16);\n    if ((h.length & 1) == 0) return h;else return '0' + h;\n  }\n\n  // protected\n  RSAKey.prototype.doPublic = RSADoPublic;\n\n  // public\n  RSAKey.prototype.setPublic = RSASetPublic;\n  RSAKey.prototype.encrypt = RSAEncrypt;\n  return RSAKey;\n}();\nconsole.log('rsa', rsa);\nif (typeof module === 'object' && module.exports) {\n  module.exports = rsa;\n}","map":{"version":3,"names":["BigInteger","require","SecureRandom","rsa","parseBigInt","str","r","pkcs1pad2","s","n","length","alert","ba","Array","i","c","charCodeAt","rng","x","nextBytes","RSAKey","e","d","p","q","dmp1","dmq1","coeff","RSASetPublic","N","E","parseInt","console","log","RSADoPublic","constructor","modPowInt","RSAEncrypt","text","m","bitLength","doPublic","h","toString","prototype","setPublic","encrypt","module","exports"],"sources":["C:/CSAI_Front/src/utils/rsa/rsa.js"],"sourcesContent":["/* eslint-disable */\r\nvar BigInteger = require('./jsbn')\r\nvar SecureRandom = require('./rng')\r\n\r\nvar rsa = (function () {\r\n  'use strict'\r\n\r\n  // convert a (hex) string to a bignum object\r\n  function parseBigInt (str, r) {\r\n    return new BigInteger(str, r)\r\n  }\r\n  /*\r\n  function linebrk(s,n) {\r\n    var ret = \"\";\r\n    var i = 0;\r\n    while(i + n < s.length) {\r\n      ret += s.substring(i,i+n) + \"\\n\";\r\n      i += n;\r\n    }\r\n    return ret + s.substring(i,s.length);\r\n  }\r\n\r\n  function byte2Hex(b) {\r\n    if(b < 0x10)\r\n      return \"0\" + b.toString(16);\r\n    else\r\n      return b.toString(16);\r\n  }\r\n  */\r\n\r\n  // PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\r\n  function pkcs1pad2 (s, n) {\r\n    if (n < s.length + 11) { // TODO: fix for utf-8\r\n      alert('Message too long for RSA')\r\n      return null\r\n    }\r\n    var ba = new Array()\r\n    var i = s.length - 1\r\n    while (i >= 0 && n > 0) {\r\n      var c = s.charCodeAt(i--)\r\n      if (c < 128) { // encode using utf-8\r\n        ba[--n] = c\r\n      } else if ((c > 127) && (c < 2048)) {\r\n        ba[--n] = (c & 63) | 128\r\n        ba[--n] = (c >> 6) | 192\r\n      } else {\r\n        ba[--n] = (c & 63) | 128\r\n        ba[--n] = ((c >> 6) & 63) | 128\r\n        ba[--n] = (c >> 12) | 224\r\n      }\r\n    }\r\n    ba[--n] = 0\r\n    var rng = new SecureRandom()\r\n    var x = new Array()\r\n    while (n > 2) { // random non-zero pad\r\n      x[0] = 0\r\n      while (x[0] == 0) rng.nextBytes(x)\r\n      ba[--n] = x[0]\r\n    }\r\n    ba[--n] = 2\r\n    ba[--n] = 0\r\n    return new BigInteger(ba)\r\n  }\r\n\r\n  // \"empty\" RSA key constructor\r\n  function RSAKey () {\r\n    this.n = null\r\n    this.e = 0\r\n    this.d = null\r\n    this.p = null\r\n    this.q = null\r\n    this.dmp1 = null\r\n    this.dmq1 = null\r\n    this.coeff = null\r\n  }\r\n\r\n  // Set the public key fields N and e from hex strings\r\n  function RSASetPublic (N, E) {\r\n    if (N != null && E != null && N.length > 0 && E.length > 0) {\r\n      this.n = parseBigInt(N, 16)\r\n      this.e = parseInt(E, 16)\r\n    } else { console.log('Invalid RSA public key') }\r\n  }\r\n\r\n  // Perform raw public operation on \"x\": return x^e (mod n)\r\n  function RSADoPublic (x) {\r\n    return x.constructor === BigInteger ? x.modPowInt(this.e, this.n) : ''\r\n  }\r\n\r\n  // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\r\n  function RSAEncrypt (text) {\r\n    var m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3)\r\n    if (m == null) return null\r\n    var c = this.doPublic(m)\r\n    if (c == null) return null\r\n    var h = c.toString(16)\r\n    if ((h.length & 1) == 0) return h; else return '0' + h\r\n  }\r\n\r\n  // protected\r\n  RSAKey.prototype.doPublic = RSADoPublic\r\n\r\n  // public\r\n  RSAKey.prototype.setPublic = RSASetPublic\r\n  RSAKey.prototype.encrypt = RSAEncrypt\r\n\r\n  return RSAKey\r\n})()\r\n\r\nconsole.log('rsa', rsa)\r\nif (typeof module === 'object' && module.exports) {\r\n  module.exports = rsa\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}