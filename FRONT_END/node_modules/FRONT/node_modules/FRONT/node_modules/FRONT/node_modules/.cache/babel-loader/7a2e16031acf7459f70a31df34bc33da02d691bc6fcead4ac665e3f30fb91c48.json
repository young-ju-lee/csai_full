{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, withKeys as _withKeys, toDisplayString as _toDisplayString, vShow as _vShow, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"dt\", null, [/*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"loginId\"\n}, \"아이디\")], -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  class: \"input_st_01\",\n  id: \"loginId\",\n  placeholder: \"아이디\",\n  value: \"\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"sic\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"sit\"\n}, \"저장\", -1 /* HOISTED */);\nconst _hoisted_5 = [_hoisted_3, _hoisted_4];\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"dt\", null, [/*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"loginPwd\"\n}, \"비밀번호\")], -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"error_txt\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", null, [_createElementVNode(\"dl\", null, [_hoisted_1, _createElementVNode(\"dd\", null, [_hoisted_2, _createElementVNode(\"div\", {\n    class: _normalizeClass('save_id ' + $data.save_id_yn),\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.saveId && $options.saveId(...args))\n  }, _hoisted_5, 2 /* CLASS */)])]), _createElementVNode(\"dl\", null, [_hoisted_6, _createElementVNode(\"dd\", null, [_createElementVNode(\"input\", {\n    type: \"password\",\n    class: \"input_st_01\",\n    id: \"loginPwd\",\n    placeholder: \"비밀번호\",\n    value: \"\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys($event => $options.signin(), [\"enter\"])),\n    autocomplete: \"false\"\n  }, null, 32 /* HYDRATE_EVENTS */)])]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.signin()),\n    id: \"btn_login\"\n  }, \"로그인\"), _createElementVNode(\"p\", _hoisted_7, _toDisplayString($data.loginErrorText), 1 /* TEXT */), _withDirectives(_createElementVNode(\"p\", null, \" build info : test \", 512 /* NEED_PATCH */), [[_vShow, $data.devtest]])]);\n}","map":{"version":3,"mappings":";gCAGMA,oBAAyC,0BAArCA,oBAAgC;EAAzBC,GAAG,EAAC;AAAS,GAAC,KAAG;gCAE1BD,oBAA+E;EAAxEE,IAAI,EAAC,MAAM;EAACC,KAAK,EAAC,aAAa;EAACC,EAAE,EAAC,SAAS;EAACC,WAAW,EAAC,KAAK;EAACC,KAAK,EAAC;;gCAE1EN,oBAAyB;EAAnBG,KAAK,EAAC;AAAK;gCACjBH,oBAA2B;EAArBG,KAAK,EAAC;AAAK,GAAC,IAAE;oBADpBI,UAAyB,EACzBC,UAA2B;gCAK/BR,oBAA2C,0BAAvCA,oBAAkC;EAA3BC,GAAG,EAAC;AAAU,GAAC,MAAI;;EAI7BE,KAAK,EAAC;AAAW;;uBAhBtBM,oBAoBO,eAnBLT,oBASK,aARHU,UAAyC,EACzCV,oBAMK,aALHW,UAA+E,EAC/EX,oBAGM;IAHAG,KAAK,+BAAeS,gBAAU;IAAGC,OAAK,yCAAEC,2CAAM;qCAMxDd,oBAGK,aAFHe,UAA2C,EAC3Cf,oBAA2I,aAAvIA,oBAAkI;IAA3HE,IAAI,EAAC,UAAU;IAACC,KAAK,EAAC,aAAa;IAACC,EAAE,EAAC,UAAU;IAACC,WAAW,EAAC,MAAM;IAACC,KAAK,EAAC,EAAE;IAAEU,OAAK,gDAAQF,eAAM;IAAIG,YAAY,EAAC;yCAEhIjB,oBAAqD;IAA5Ca,OAAK,sCAAEC,eAAM;IAAIV,EAAE,EAAC;KAAY,KAAG,GAC5CJ,oBAA6C,KAA7CkB,UAA6C,mBAArBN,oBAAc,kCACtCZ,oBAEI,WAFgB,qBAEpB,mCAFWY,aAAO","names":["_createElementVNode","for","type","class","id","placeholder","value","_hoisted_3","_hoisted_4","_createElementBlock","_hoisted_1","_hoisted_2","$data","onClick","$options","_hoisted_6","onKeyup","autocomplete","_hoisted_7"],"sourceRoot":"","sources":["C:\\CSAI_Front\\src\\views\\pages\\auth\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <form>\r\n    <dl>\r\n      <dt><label for=\"loginId\">아이디</label></dt>\r\n      <dd>\r\n        <input type=\"text\" class=\"input_st_01\" id=\"loginId\" placeholder=\"아이디\" value=\"\">\r\n        <div :class=\"'save_id ' + save_id_yn\" @click=\"saveId\">\r\n          <span class=\"sic\"></span>\r\n          <span class=\"sit\">저장</span>\r\n        </div>\r\n      </dd>\r\n    </dl>\r\n    <dl>\r\n      <dt><label for=\"loginPwd\">비밀번호</label></dt>\r\n      <dd><input type=\"password\" class=\"input_st_01\" id=\"loginPwd\" placeholder=\"비밀번호\" value=\"\" @keyup.enter=\"signin()\" autocomplete=\"false\"></dd>\r\n    </dl>\r\n    <button @click=\"signin()\" id=\"btn_login\">로그인</button>\r\n    <p class=\"error_txt\">{{ loginErrorText }}</p>\r\n    <p v-show=\"devtest\">\r\n      build info : test\r\n    </p>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport RSAKey from '../../../utils/rsa/rsa';\r\n\r\nexport default {\r\n  name: 'LoginForm',\r\n  emits : [\"setUiToggleNum\"],\r\n  data() {\r\n    return {\r\n      uiToggleNum : 1, // #TOFIX 임시 화면 전환용\r\n      devtest : false, // #TODEL 개발 완료시 삭제 필요\r\n      loginErrorText : \"\", // 로그인 에러\r\n      save_id_yn : \"\",\r\n    }\r\n  },\r\n  computed: {\r\n    userLoginData() {\r\n      // 로그인 성공 여부 & 에러 메시지\r\n      return this.$store.state.auth.userLoginData;\r\n    },\r\n    userInfo() {\r\n      // 로그인 사용자 정보\r\n      return this.$store.state.auth.userInfo;\r\n    },\r\n    userOtp() {\r\n      // Otp 정보 수신\r\n      return this.$store.state.auth.userOtp;\r\n    },\r\n    ossInfo() {\r\n      // Otp 정보 수신\r\n      return this.$store.state.auth.ossInfo;\r\n    },\r\n    rsaKey() {\r\n      return this.$store.state.auth.rsaKey;\r\n    },\r\n    userLoginInfo(){\r\n      return this.$store.state.auth.userLoginInfo;\r\n    }\r\n  },\r\n  created() {\r\n    // #TODEL test용 - 기본값 false\r\n    if(process.env.VUE_APP_MODE == \"test\"){\r\n      this.devtest = true;\r\n    }\r\n  },\r\n  methods: {\r\n    // 로그인 버튼\r\n    signin(){\r\n      let btn_login = document.getElementById(\"btn_login\");\r\n      if(btn_login.disabled){\r\n        return;\r\n      }\r\n      // 로그인 버튼 비활성화. #서버 요청 반복 처리 방지용 함수 추가 필요.\r\n      btn_login.disabled = true;\r\n      if(this.save_id_yn == \"on\"){\r\n        this.save_id_yn = \"\"\r\n        this.saveId();\r\n      }\r\n      // login 아이디 가져오는 부분\r\n      let loginId = document.getElementById(\"loginId\").value;\r\n      let loginPwd = document.getElementById(\"loginPwd\").value;\r\n      // #TOFIX 로그 관련해서 공통 처리 모듈 필요 - 빌드 종류로 로그인 방식 구분\r\n      // console.log(\"#TEST_LOG : 로그인 시도 : \" + loginId + \"/\" + loginPwd);\r\n\r\n\r\n      // #TODO 기본 유효성 검증 추가되야되는 부분\r\n      // rsa 처리\r\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\r\n        const rsa = new RSAKey();\r\n\r\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\r\n\r\n        let payload = {\r\n            \"loginId\": rsa.encrypt(loginId), \r\n            \"loginPwd\": rsa.encrypt(loginPwd)\r\n        };\r\n        // $store 로그인 호출\r\n        this.$store.dispatch(\"auth/signin\", payload).then(() => {\r\n            // 로그인 성공시\r\n            if(this.userLoginData.resultCode == 1){\r\n              // 기존값으로 재 세팅\r\n              this.userLoginInfo.loginId = loginId;\r\n              this.userLoginInfo.loginPwd = loginPwd;\r\n              this.$emit('setUiToggleNum', 2, 'pass');\r\n            }else{\r\n              // #TOFIX 반복 부분 함수화, URL 변수화\r\n              btn_login.disabled = false;\r\n              if(this.userLoginData.resultCode == 5){\r\n                this.loginErrorText = \"내부 시스템 에러입니다.\"\r\n              }else if(this.userLoginData.resultCode == 95){\r\n                // #TOFIX 팝업 열리는 부분 공통 변수화\r\n                let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\r\n                window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\r\n              }else{\r\n                this.loginErrorText = this.userLoginData.resultMessage;\r\n              }\r\n            }\r\n        }).catch(error => {\r\n          console.log(error);\r\n        });\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n    },\r\n    // #TOFIX : 쿠키 가져오기 : 추후 보안 강화하고 공통 함수로 변경\r\n    getSaveId(){\r\n      let cName = 'save_id=';\r\n      let cookieData = document.cookie;\r\n      let start = cookieData.indexOf(cName);\r\n      let cValue = '';\r\n      if(start != -1){\r\n        start += cName.length;\r\n        let end = cookieData.indexOf(';', start);\r\n        if(end == -1){\r\n          end = cookieData.length;\r\n        }\r\n        cValue = cookieData.substring(start, end);\r\n      }\r\n      //unescape(cValue);\r\n      if(cValue != null && cValue != ''){\r\n        document.getElementById(\"loginId\").value = unescape(cValue);\r\n        this.save_id_yn = \"on\";\r\n      }\r\n    },\r\n    saveId(){\r\n      if(this.save_id_yn == \"on\"){\r\n        this.deleteSaveId();  \r\n        return;\r\n      }\r\n      let value = document.getElementById(\"loginId\").value;\r\n      if(value == \"\"){\r\n        return;\r\n      }\r\n      let cookieName = \"save_id\";\r\n      let exdate = new Date();\r\n      exdate.setDate(exdate.getDate() + 60);\r\n      let cookieValue = escape(value) + \"; expires=\" + exdate.toGMTString();\r\n      document.cookie = cookieName + \"=\" + cookieValue;\r\n      this.save_id_yn = \"on\";\r\n    },\r\n    deleteSaveId(){\r\n      this.save_id_yn = \"\";\r\n      this.$forceUpdate();\r\n      let exdate = new Date();\r\n      exdate.setDate(exdate.getDate() - 1);\r\n      document.cookie = \"save_id= ; expires=\" + exdate.toGMTString();\r\n    },\r\n    ossChecker(){\r\n      if(this.$route.query.userId != undefined){\r\n        document.getElementById(\"loginId\").value = this.$route.query.userId;\r\n        this.ossInfo.userId = this.$route.query.userId;\r\n        if(this.$route.query.TTID != undefined){\r\n          this.ossInfo.TTID = this.$route.query.TTID;\r\n        }\r\n      }\r\n    },\r\n  },\r\n  mounted(){\r\n    this.getSaveId();\r\n    this.ossChecker();\r\n  }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}