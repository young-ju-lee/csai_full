{"ast":null,"code":"import RSAKey from '../../../utils/rsa/rsa';\nexport default {\n  name: 'LoginForm',\n  emits: [\"setUiToggleNum\"],\n  data() {\n    return {\n      uiToggleNum: 1,\n      // #TOFIX 임시 화면 전환용\n      devtest: false,\n      // #TODEL 개발 완료시 삭제 필요\n      loginErrorText: \"\",\n      // 로그인 에러\n      save_id_yn: \"\"\n    };\n  },\n  computed: {\n    userLoginData() {\n      // 로그인 성공 여부 & 에러 메시지\n      return this.$store.state.auth.userLoginData;\n    },\n    userInfo() {\n      // 로그인 사용자 정보\n      return this.$store.state.auth.userInfo;\n    },\n    userOtp() {\n      // Otp 정보 수신\n      return this.$store.state.auth.userOtp;\n    },\n    ossInfo() {\n      // Otp 정보 수신\n      return this.$store.state.auth.ossInfo;\n    },\n    rsaKey() {\n      return this.$store.state.auth.rsaKey;\n    },\n    userLoginInfo() {\n      return this.$store.state.auth.userLoginInfo;\n    }\n  },\n  created() {\n    // #TODEL test용 - 기본값 false\n    if (process.env.VUE_APP_MODE == \"test\") {\n      this.devtest = true;\n    }\n  },\n  methods: {\n    // 로그인 버튼\n    signin() {\n      let btn_login = document.getElementById(\"btn_login\");\n      if (btn_login.disabled) {\n        return;\n      }\n      // 로그인 버튼 비활성화. #서버 요청 반복 처리 방지용 함수 추가 필요.\n      btn_login.disabled = true;\n      if (this.save_id_yn == \"on\") {\n        this.save_id_yn = \"\";\n        this.saveId();\n      }\n      // login 아이디 가져오는 부분\n      let loginId = document.getElementById(\"loginId\").value;\n      let loginPwd = document.getElementById(\"loginPwd\").value;\n      // #TOFIX 로그 관련해서 공통 처리 모듈 필요 - 빌드 종류로 로그인 방식 구분\n      // console.log(\"#TEST_LOG : 로그인 시도 : \" + loginId + \"/\" + loginPwd);\n\n      // #TODO 기본 유효성 검증 추가되야되는 부분\n      // rsa 처리\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\n        const rsa = new RSAKey();\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\n        let payload = {\n          \"loginId\": rsa.encrypt(loginId),\n          \"loginPwd\": rsa.encrypt(loginPwd)\n        };\n        // $store 로그인 호출\n        this.$store.dispatch(\"auth/signin\", payload).then(() => {\n          // 로그인 성공시\n          if (this.userLoginData.resultCode == 1) {\n            // 기존값으로 재 세팅\n            this.userLoginInfo.loginId = loginId;\n            this.userLoginInfo.loginPwd = loginPwd;\n            this.$emit('setUiToggleNum', 2, 'pass');\n          } else {\n            // #TOFIX 반복 부분 함수화, URL 변수화\n            btn_login.disabled = false;\n            if (this.userLoginData.resultCode == 5) {\n              this.loginErrorText = \"내부 시스템 에러입니다.\";\n            } else if (this.userLoginData.resultCode == 95) {\n              // #TOFIX 팝업 열리는 부분 공통 변수화\n              let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\n              window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\n            } else {\n              this.loginErrorText = this.userLoginData.resultMessage;\n            }\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    // #TOFIX : 쿠키 가져오기 : 추후 보안 강화하고 공통 함수로 변경\n    getSaveId() {\n      let cName = 'save_id=';\n      let cookieData = document.cookie;\n      let start = cookieData.indexOf(cName);\n      let cValue = '';\n      if (start != -1) {\n        start += cName.length;\n        let end = cookieData.indexOf(';', start);\n        if (end == -1) {\n          end = cookieData.length;\n        }\n        cValue = cookieData.substring(start, end);\n      }\n      //unescape(cValue);\n      if (cValue != null && cValue != '') {\n        document.getElementById(\"loginId\").value = unescape(cValue);\n        this.save_id_yn = \"on\";\n      }\n    },\n    saveId() {\n      if (this.save_id_yn == \"on\") {\n        this.deleteSaveId();\n        return;\n      }\n      let value = document.getElementById(\"loginId\").value;\n      if (value == \"\") {\n        return;\n      }\n      let cookieName = \"save_id\";\n      let exdate = new Date();\n      exdate.setDate(exdate.getDate() + 60);\n      let cookieValue = escape(value) + \"; expires=\" + exdate.toGMTString();\n      document.cookie = cookieName + \"=\" + cookieValue;\n      this.save_id_yn = \"on\";\n    },\n    deleteSaveId() {\n      this.save_id_yn = \"\";\n      this.$forceUpdate();\n      let exdate = new Date();\n      exdate.setDate(exdate.getDate() - 1);\n      document.cookie = \"save_id= ; expires=\" + exdate.toGMTString();\n    },\n    ossChecker() {\n      if (this.$route.query.userId != undefined) {\n        document.getElementById(\"loginId\").value = this.$route.query.userId;\n        this.ossInfo.userId = this.$route.query.userId;\n        if (this.$route.query.TTID != undefined) {\n          this.ossInfo.TTID = this.$route.query.TTID;\n        }\n      }\n    }\n  },\n  mounted() {\n    this.getSaveId();\n    this.ossChecker();\n  }\n};","map":{"version":3,"mappings":"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","names":["RSAKey","name","emits","data","uiToggleNum","devtest","loginErrorText","save_id_yn","computed","userLoginData","$store","state","auth","userInfo","userOtp","ossInfo","rsaKey","userLoginInfo","created","process","env","VUE_APP_MODE","methods","signin","btn_login","document","getElementById","disabled","saveId","loginId","value","loginPwd","dispatch","then","rsa","setPublic","public_key_modulus","public_key_exponent","payload","encrypt","resultCode","$emit","options","window","open","resultMessage","catch","error","console","log","getSaveId","cName","cookieData","cookie","start","indexOf","cValue","length","end","substring","unescape","deleteSaveId","cookieName","exdate","Date","setDate","getDate","cookieValue","escape","toGMTString","$forceUpdate","ossChecker","$route","query","userId","undefined","TTID","mounted"],"sourceRoot":"","sources":["C:\\CSAI_Front\\src\\views\\pages\\auth\\LoginForm.vue"],"sourcesContent":["<template>\r\n  <form>\r\n    <dl>\r\n      <dt><label for=\"loginId\">아이디</label></dt>\r\n      <dd>\r\n        <input type=\"text\" class=\"input_st_01\" id=\"loginId\" placeholder=\"아이디\" value=\"\">\r\n        <div :class=\"'save_id ' + save_id_yn\" @click=\"saveId\">\r\n          <span class=\"sic\"></span>\r\n          <span class=\"sit\">저장</span>\r\n        </div>\r\n      </dd>\r\n    </dl>\r\n    <dl>\r\n      <dt><label for=\"loginPwd\">비밀번호</label></dt>\r\n      <dd><input type=\"password\" class=\"input_st_01\" id=\"loginPwd\" placeholder=\"비밀번호\" value=\"\" @keyup.enter=\"signin()\" autocomplete=\"false\"></dd>\r\n    </dl>\r\n    <button @click=\"signin()\" id=\"btn_login\">로그인</button>\r\n    <p class=\"error_txt\">{{ loginErrorText }}</p>\r\n    <p v-show=\"devtest\">\r\n      build info : test\r\n    </p>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport RSAKey from '../../../utils/rsa/rsa';\r\n\r\nexport default {\r\n  name: 'LoginForm',\r\n  emits : [\"setUiToggleNum\"],\r\n  data() {\r\n    return {\r\n      uiToggleNum : 1, // #TOFIX 임시 화면 전환용\r\n      devtest : false, // #TODEL 개발 완료시 삭제 필요\r\n      loginErrorText : \"\", // 로그인 에러\r\n      save_id_yn : \"\",\r\n    }\r\n  },\r\n  computed: {\r\n    userLoginData() {\r\n      // 로그인 성공 여부 & 에러 메시지\r\n      return this.$store.state.auth.userLoginData;\r\n    },\r\n    userInfo() {\r\n      // 로그인 사용자 정보\r\n      return this.$store.state.auth.userInfo;\r\n    },\r\n    userOtp() {\r\n      // Otp 정보 수신\r\n      return this.$store.state.auth.userOtp;\r\n    },\r\n    ossInfo() {\r\n      // Otp 정보 수신\r\n      return this.$store.state.auth.ossInfo;\r\n    },\r\n    rsaKey() {\r\n      return this.$store.state.auth.rsaKey;\r\n    },\r\n    userLoginInfo(){\r\n      return this.$store.state.auth.userLoginInfo;\r\n    }\r\n  },\r\n  created() {\r\n    // #TODEL test용 - 기본값 false\r\n    if(process.env.VUE_APP_MODE == \"test\"){\r\n      this.devtest = true;\r\n    }\r\n  },\r\n  methods: {\r\n    // 로그인 버튼\r\n    signin(){\r\n      let btn_login = document.getElementById(\"btn_login\");\r\n      if(btn_login.disabled){\r\n        return;\r\n      }\r\n      // 로그인 버튼 비활성화. #서버 요청 반복 처리 방지용 함수 추가 필요.\r\n      btn_login.disabled = true;\r\n      if(this.save_id_yn == \"on\"){\r\n        this.save_id_yn = \"\"\r\n        this.saveId();\r\n      }\r\n      // login 아이디 가져오는 부분\r\n      let loginId = document.getElementById(\"loginId\").value;\r\n      let loginPwd = document.getElementById(\"loginPwd\").value;\r\n      // #TOFIX 로그 관련해서 공통 처리 모듈 필요 - 빌드 종류로 로그인 방식 구분\r\n      // console.log(\"#TEST_LOG : 로그인 시도 : \" + loginId + \"/\" + loginPwd);\r\n\r\n\r\n      // #TODO 기본 유효성 검증 추가되야되는 부분\r\n      // rsa 처리\r\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\r\n        const rsa = new RSAKey();\r\n\r\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\r\n\r\n        let payload = {\r\n            \"loginId\": rsa.encrypt(loginId), \r\n            \"loginPwd\": rsa.encrypt(loginPwd)\r\n        };\r\n        // $store 로그인 호출\r\n        this.$store.dispatch(\"auth/signin\", payload).then(() => {\r\n            // 로그인 성공시\r\n            if(this.userLoginData.resultCode == 1){\r\n              // 기존값으로 재 세팅\r\n              this.userLoginInfo.loginId = loginId;\r\n              this.userLoginInfo.loginPwd = loginPwd;\r\n              this.$emit('setUiToggleNum', 2, 'pass');\r\n            }else{\r\n              // #TOFIX 반복 부분 함수화, URL 변수화\r\n              btn_login.disabled = false;\r\n              if(this.userLoginData.resultCode == 5){\r\n                this.loginErrorText = \"내부 시스템 에러입니다.\"\r\n              }else if(this.userLoginData.resultCode == 95){\r\n                // #TOFIX 팝업 열리는 부분 공통 변수화\r\n                let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\r\n                window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\r\n              }else{\r\n                this.loginErrorText = this.userLoginData.resultMessage;\r\n              }\r\n            }\r\n        }).catch(error => {\r\n          console.log(error);\r\n        });\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n    },\r\n    // #TOFIX : 쿠키 가져오기 : 추후 보안 강화하고 공통 함수로 변경\r\n    getSaveId(){\r\n      let cName = 'save_id=';\r\n      let cookieData = document.cookie;\r\n      let start = cookieData.indexOf(cName);\r\n      let cValue = '';\r\n      if(start != -1){\r\n        start += cName.length;\r\n        let end = cookieData.indexOf(';', start);\r\n        if(end == -1){\r\n          end = cookieData.length;\r\n        }\r\n        cValue = cookieData.substring(start, end);\r\n      }\r\n      //unescape(cValue);\r\n      if(cValue != null && cValue != ''){\r\n        document.getElementById(\"loginId\").value = unescape(cValue);\r\n        this.save_id_yn = \"on\";\r\n      }\r\n    },\r\n    saveId(){\r\n      if(this.save_id_yn == \"on\"){\r\n        this.deleteSaveId();  \r\n        return;\r\n      }\r\n      let value = document.getElementById(\"loginId\").value;\r\n      if(value == \"\"){\r\n        return;\r\n      }\r\n      let cookieName = \"save_id\";\r\n      let exdate = new Date();\r\n      exdate.setDate(exdate.getDate() + 60);\r\n      let cookieValue = escape(value) + \"; expires=\" + exdate.toGMTString();\r\n      document.cookie = cookieName + \"=\" + cookieValue;\r\n      this.save_id_yn = \"on\";\r\n    },\r\n    deleteSaveId(){\r\n      this.save_id_yn = \"\";\r\n      this.$forceUpdate();\r\n      let exdate = new Date();\r\n      exdate.setDate(exdate.getDate() - 1);\r\n      document.cookie = \"save_id= ; expires=\" + exdate.toGMTString();\r\n    },\r\n    ossChecker(){\r\n      if(this.$route.query.userId != undefined){\r\n        document.getElementById(\"loginId\").value = this.$route.query.userId;\r\n        this.ossInfo.userId = this.$route.query.userId;\r\n        if(this.$route.query.TTID != undefined){\r\n          this.ossInfo.TTID = this.$route.query.TTID;\r\n        }\r\n      }\r\n    },\r\n  },\r\n  mounted(){\r\n    this.getSaveId();\r\n    this.ossChecker();\r\n  }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}