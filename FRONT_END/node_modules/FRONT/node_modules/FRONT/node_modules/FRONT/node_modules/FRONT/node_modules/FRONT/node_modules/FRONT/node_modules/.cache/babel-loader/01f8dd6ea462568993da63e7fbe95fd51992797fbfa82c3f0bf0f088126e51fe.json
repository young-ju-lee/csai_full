{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es.array.push.js\");\nvar _default = {\n  name: 'ConsultNetDiagram',\n  data() {\n    return {\n      consultDgrmArray: []\n    };\n  },\n  created() {},\n  computed: {\n    hdmsDgrmList() {\n      return this.$store.state.trouble.hdmsDgrmList;\n    },\n    consultTarget() {\n      // 로그인 사용자 정보\n      return this.$store.state.consult.consultTarget;\n    }\n  },\n  methods: {\n    getHdmsDgrmList() {\n      this.consultDgrmArray = [];\n      let item = {\n        ttId: this.consultTarget.currTtID //localStorage.getItem('ttId')\n      };\n\n      this.$store.dispatch(\"trouble/hdmsDgrmList\", item).then(() => {\n        if (this.hdmsDgrmList.length > 0) {\n          this.getConsultDgrm();\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    getConsultDgrm() {\n      // 이전 블록 공백 계산용 (이전 블록 == 부모값이 다른 전 루프 데이터)\n      let beforeBlockArray = 1;\n      // 같은 부모 블록 계산용 (이전 블록 == 부모값이 다른 데이터)\n      let sameBlockCnt = 0;\n      // hdmsDgrmList -> consultDgrmArray UI용 데이터 배열 생성(자릿수로 push)\n      for (let i = 0; i < this.hdmsDgrmList.length; i++) {\n        console.log(this.hdmsDgrmList[i].seq);\n        // seq가 null이 아닐때만 put\n        if (this.hdmsDgrmList[i].seq != null) {\n          // 모뎀 세팅 (seq == 0)\n          if (this.hdmsDgrmList[i].seq == \"0\") {\n            // seq 삭제해서 자릿수 변경\n            this.hdmsDgrmList[i].seq = \"\";\n          }\n          // 사설장비 세팅\n          if (this.hdmsDgrmList[i].seq.indexOf(\"E\") >= 0) {\n            // seq 삭제해서 자릿수 변경\n            //if(this.hdmsDgrmList[i].seq.substr(1).length < 2){\n            let newHdms = Object.assign({}, this.hdmsDgrmList[i]);\n            newHdms.seq = 'Z1';\n            newHdms.typeClass = \"first_block\";\n            this.hdmsDgrmList[i].termlType = \"E\";\n            this.hdmsDgrmList.splice(i + 1, 0, newHdms);\n            this.hdmsDgrmList[i].seq = 'Z';\n\n            // }else{\n            //   this.hdmsDgrmList[i].seq = 'Z1';\n            //   // 부모값이 같은지 확인해서 같을시에는 별도 클레스 처리\n            //   if(this.hdmsDgrmList[i].seq == this.hdmsDgrmList[i - 1].seq){\n            //     this.hdmsDgrmList[i].typeClass = \"link_block\";\n            //   }\n            // }\n          }\n\n          // css용 클래스 객체 생성\n          if (this.hdmsDgrmList[i].seq.indexOf(\"Z\") == -1) {\n            this.hdmsDgrmList[i].typeClass = \"\";\n          }\n          // 자릿수 계산 (ex : '' = 0, '1' = 1, '11' = 2)\n          let tempNum = this.hdmsDgrmList[i].seq.length;\n          if (this.consultDgrmArray[tempNum] == undefined) {\n            // 값이 없을시 초기값 배열로 할당\n            this.consultDgrmArray[tempNum] = [];\n          }\n          // 받아온 데이터를 자릿수에 맞는 배열로 추가\n          this.consultDgrmArray[tempNum].push(this.hdmsDgrmList[i]);\n\n          // 현재 자리수의 배열 길이\n          let lenNum = this.consultDgrmArray[tempNum].length - 1;\n          // 자릿수가 2자리 이상이고, 배열의 2번째 항목일 때 처리하는 분기\n          if (tempNum > 1 && lenNum > 0) {\n            // 빈값 확인. error 방지용 분기\n            if (this.consultDgrmArray[tempNum][lenNum - 1].seq == undefined) {\n              // 0번제 데이터가 없음으로 이전 블록 공백은 0 == 추가될 값은 1 세팅 \n              beforeBlockArray = 1;\n            }\n            // 이전 블럭(부모값과)과 자리수가 같지 않을 때 - first_block 클래스 추가 (css 처리용)\n            else if (this.consultDgrmArray[tempNum][lenNum - 1].seq.slice(0, -1) != this.consultDgrmArray[tempNum][lenNum].seq.slice(0, -1)) {\n              this.hdmsDgrmList[i].typeClass = \"first_block\";\n              // 이전 블록 개수를 저장 후 반복문 처리\n              if (sameBlockCnt != 0) {\n                for (let j = 0; j < sameBlockCnt; j++) {\n                  // beforeBlockArray 부모 배열 이전 블록 위치에 공백 추가 \n                  this.consultDgrmArray[tempNum - 1].splice(beforeBlockArray, 0, {\n                    \"typeClass\": \"none\"\n                  });\n                }\n              }\n              // 루프가 끝났음으로 같은 블록값 초기화\n              sameBlockCnt = 0;\n              // 블록 처리가 하나 끝났음으로 이전 블록 처리값 증가\n              beforeBlockArray++;\n            } else {\n              // 이전 블록과 같은 값일때는 같은 블록값 증가\n              sameBlockCnt++;\n            }\n          }\n          // 현재 라인(같은 다차원 하위 배열 넘버) 공백 처리용. error 방지용 분기\n          if (this.consultDgrmArray[tempNum - 1] != undefined) {\n            // seq 2자리수부터 처리 진행 && error 방지용 분기\n            if (1 < tempNum && this.consultDgrmArray[tempNum - 1][lenNum] != undefined) {\n              // 현재 배열의 라인의 부모값과 부모 배열의 라인에 데이터가 일치하는지 확인하고 불일치의 경우 공백 처리\n              if (this.consultDgrmArray[tempNum][lenNum].seq.slice(0, -1) != this.consultDgrmArray[tempNum - 1][lenNum].seq) {\n                // 이전 블록이 없음으로 첫번째 first_block 처리 분기를 못탔을 것임으로 first_block class 추가\n                this.hdmsDgrmList[i].typeClass = \"first_block\";\n                // 현재의 부모값 - 같은 라인의 부모 배열 값 = 라인 차이 계산값\n                let cnt = 0;\n                if (this.consultDgrmArray[tempNum][lenNum].seq.slice(0, -1) == 'Z') {\n                  cnt = 1;\n                } else {\n                  cnt = (this.consultDgrmArray[tempNum][lenNum].seq.slice(0, -1) - this.consultDgrmArray[tempNum - 1][lenNum].seq) * 1;\n                }\n\n                // 공백 추가 위치 계산용 변수\n                let lenup = 0;\n                //  라인 차이 계산값만큼 공백 추가용 루프\n                for (let k = 0; k < cnt; k++) {\n                  this.consultDgrmArray[tempNum].splice(lenNum + lenup, 0, {\n                    \"typeClass\": \"none\"\n                  });\n                  beforeBlockArray++;\n                  // 블록 처리가 하나 끝났음으로 이전 블록 처리값 증가\n                  lenup++;\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    openConsultHdmsResultInfoPopup(item) {\n      if (item.seq != 'Z') {\n        let options = \"top=10, width=600, height=450, status=no, menubar=no, toolbar=no, resizable=no\";\n        window.open(\"/popup/ConsultHdmsResultInfoPopup?ttId=\" + item.ttId + \"&scn=\" + item.scn + \"&termlType=\" + item.termlType, \"ConsultHdmsResultInfoPopup\", options);\n      }\n    }\n  }\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}