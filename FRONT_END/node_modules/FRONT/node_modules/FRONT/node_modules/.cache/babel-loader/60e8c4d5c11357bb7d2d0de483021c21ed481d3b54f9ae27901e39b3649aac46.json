{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _api = require(\"../../api\");\n// state\nconst state = {\n  userLoginData: [],\n  // userLoginData : 사용자 로그인 관련 정보\n  userLoginInfo: [],\n  // userLoginInfo : 로그인 시도 정보\n  userInfo: [],\n  // userInfo : 사용자 정보(로그인 성공시에만 저장)\n  userOtp: [],\n  // userOtp : Otp 정보\n  ossInfo: [],\n  // ossInfo : oss통한 접속 시 정보\n  rsaKey: [],\n  renewalToken: []\n};\n\n// getters\nconst getters = {};\n\n// actions\nconst actions = {\n  // signin : 로그인 호출\n  async signin(context, payload) {\n    // 로그인 시도 정보 저장\n    state.userLoginInfo = payload;\n    let resp = await _api.authService.signin(payload);\n    context.commit('SIGNIN', resp.data);\n  },\n  async skipotp(context, payload) {\n    // OTP 인승 스킵\n    state.userLoginInfo = payload;\n    let resp = await _api.authService.skipOtp(payload);\n    context.commit('SKIPOTP', resp.data);\n  },\n  // authOtp : OTP 호출\n  async authOtp(context, payload) {\n    let resp = await _api.authService.authOtp(payload);\n    context.commit('AUTH_OTP', resp.data);\n  },\n  // signout : 로그아웃\n  async signout(context) {\n    let resp = await _api.authService.signout();\n    // #TOFIX : 로그아웃 후처리 필요할 수 있으니 일단 추가\n    context.commit('SIGNOUT', resp.data);\n  },\n  // renewalToken : 토큰 갱신\n  async renewalToken(context) {\n    let resp = await _api.authService.renewalToken();\n    context.commit('RENEWAL_TOKEN', resp.data);\n  },\n  // userInfo : 로그인 복구용 데이터 확인\n  async userInfo(context) {\n    let resp = await _api.authService.userInfo();\n    context.commit('USER_INFO', resp.data);\n  },\n  async rsaGetKey(context) {\n    let resp = await _api.authService.rsaGetKey();\n    context.commit('RSA_GET_KEY', resp.data);\n  }\n};\n\n// mutations\nconst mutations = {\n  // signin : 로그인 응답 처리\n  SIGNIN(state, res) {\n    // res.resultCode == 1 : 성공\n    if (res.resultCode == 1) {\n      state.userInfo = res.data;\n      // console.log(\"userInfo set\");\n      // console.log(state.userInfo);\n    } else {\n      state.userInfo = [];\n    }\n    state.userLoginData = res;\n    // console.log(state.userLoginData);\n  },\n\n  // skipotp : OTP SKIP 응답 처리\n  SKIPOTP(state, res) {\n    // res.resultCode == 1 : 성공\n    if (res.resultCode == 1) {\n      state.userInfo = res.data;\n      // console.log(\"userInfo set\");\n      // console.log(state.userInfo);\n    } else {\n      state.userInfo = [];\n    }\n    state.userLoginData = res;\n    // console.log(state.userLoginData);\n  },\n\n  // authOtp : OTP 응답 처리\n  AUTH_OTP(state, res) {\n    state.userOtp = res;\n    // console.log(res);\n    // console.log(\"--\");\n    // console.log(res.headers);\n  },\n\n  // signout : 로그아웃 응답 처리\n  SIGNOUT(state) {\n    // 로직의 처리 순서 변경 필요.\n    // #TOFIX : 보안상 서버단 로그인 호출이 실패했을 경우에도 로그아웃시 제거 필요함\n    state.userInfo = [];\n    state.userLoginData = [];\n  },\n  // renewalToken : 토큰 갱신 응답 처리\n  RENEWAL_TOKEN(state, res) {\n    state.renewalToken = res;\n  },\n  // userInfo : 로그인 복구용 데이터 확인 응답 처리\n  USER_INFO(state, res) {\n    // console.log(res);\n    // 기본 로그인이랑 맞춰야함.\n    state.userInfo = res.data;\n  },\n  RSA_GET_KEY(state, res) {\n    state.rsaKey = res.data;\n  }\n};\nvar _default = {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}