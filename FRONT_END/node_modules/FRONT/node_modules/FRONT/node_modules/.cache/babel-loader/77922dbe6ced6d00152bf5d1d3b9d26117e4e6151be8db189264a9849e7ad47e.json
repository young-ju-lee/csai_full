{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/CSAI_Front/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _rsa = _interopRequireDefault(require(\"../../../utils/rsa/rsa\"));\nvar _default = {\n  name: 'LoginForm',\n  emits: [\"setUiToggleNum\"],\n  data() {\n    return {\n      uiToggleNum: 1,\n      // #TOFIX 임시 화면 전환용\n      devtest: false,\n      // #TODEL 개발 완료시 삭제 필요\n      loginErrorText: \"\",\n      // 로그인 에러\n      save_id_yn: \"\"\n    };\n  },\n  computed: {\n    userLoginData() {\n      // 로그인 성공 여부 & 에러 메시지\n      return this.$store.state.auth.userLoginData;\n    },\n    userInfo() {\n      // 로그인 사용자 정보\n      return this.$store.state.auth.userInfo;\n    },\n    userOtp() {\n      // Otp 정보 수신\n      return this.$store.state.auth.userOtp;\n    },\n    ossInfo() {\n      // Otp 정보 수신\n      return this.$store.state.auth.ossInfo;\n    },\n    rsaKey() {\n      return this.$store.state.auth.rsaKey;\n    },\n    userLoginInfo() {\n      return this.$store.state.auth.userLoginInfo;\n    }\n  },\n  created() {\n    // #TODEL test용 - 기본값 false\n    if (process.env.VUE_APP_MODE == \"test\") {\n      this.devtest = true;\n    }\n  },\n  methods: {\n    // 로그인 버튼\n    signin() {\n      let btn_login = document.getElementById(\"btn_login\");\n      if (btn_login.disabled) {\n        return;\n      }\n      // 로그인 버튼 비활성화. #서버 요청 반복 처리 방지용 함수 추가 필요.\n      btn_login.disabled = true;\n      if (this.save_id_yn == \"on\") {\n        this.save_id_yn = \"\";\n        this.saveId();\n      }\n      // login 아이디 가져오는 부분\n      let loginId = document.getElementById(\"loginId\").value;\n      let loginPwd = document.getElementById(\"loginPwd\").value;\n      // #TOFIX 로그 관련해서 공통 처리 모듈 필요 - 빌드 종류로 로그인 방식 구분\n      // console.log(\"#TEST_LOG : 로그인 시도 : \" + loginId + \"/\" + loginPwd);\n\n      // #TODO 기본 유효성 검증 추가되야되는 부분\n      // rsa 처리\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\n        const rsa = new _rsa.default();\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\n        let payload = {\n          \"loginId\": rsa.encrypt(loginId),\n          \"loginPwd\": rsa.encrypt(loginPwd)\n        };\n        // $store 로그인 호출\n        this.$store.dispatch(\"auth/signin\", payload).then(() => {\n          // 로그인 성공시\n          if (this.userLoginData.resultCode == 1) {\n            // 기존값으로 재 세팅\n            this.userLoginInfo.loginId = loginId;\n            this.userLoginInfo.loginPwd = loginPwd;\n            this.$emit('setUiToggleNum', 2, 'pass');\n          } else {\n            // #TOFIX 반복 부분 함수화, URL 변수화\n            btn_login.disabled = false;\n            if (this.userLoginData.resultCode == 5) {\n              this.loginErrorText = \"내부 시스템 에러입니다.\";\n            } else if (this.userLoginData.resultCode == 95) {\n              // #TOFIX 팝업 열리는 부분 공통 변수화\n              let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\n              window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\n            } else {\n              this.loginErrorText = this.userLoginData.resultMessage;\n            }\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    // #TOFIX : 쿠키 가져오기 : 추후 보안 강화하고 공통 함수로 변경\n    getSaveId() {\n      let cName = 'save_id=';\n      let cookieData = document.cookie;\n      let start = cookieData.indexOf(cName);\n      let cValue = '';\n      if (start != -1) {\n        start += cName.length;\n        let end = cookieData.indexOf(';', start);\n        if (end == -1) {\n          end = cookieData.length;\n        }\n        cValue = cookieData.substring(start, end);\n      }\n      //unescape(cValue);\n      if (cValue != null && cValue != '') {\n        document.getElementById(\"loginId\").value = unescape(cValue);\n        this.save_id_yn = \"on\";\n      }\n    },\n    saveId() {\n      if (this.save_id_yn == \"on\") {\n        this.deleteSaveId();\n        return;\n      }\n      let value = document.getElementById(\"loginId\").value;\n      if (value == \"\") {\n        return;\n      }\n      let cookieName = \"save_id\";\n      let exdate = new Date();\n      exdate.setDate(exdate.getDate() + 60);\n      let cookieValue = escape(value) + \"; expires=\" + exdate.toGMTString();\n      document.cookie = cookieName + \"=\" + cookieValue;\n      this.save_id_yn = \"on\";\n    },\n    deleteSaveId() {\n      this.save_id_yn = \"\";\n      this.$forceUpdate();\n      let exdate = new Date();\n      exdate.setDate(exdate.getDate() - 1);\n      document.cookie = \"save_id= ; expires=\" + exdate.toGMTString();\n    },\n    ossChecker() {\n      if (this.$route.query.userId != undefined) {\n        document.getElementById(\"loginId\").value = this.$route.query.userId;\n        this.ossInfo.userId = this.$route.query.userId;\n        if (this.$route.query.TTID != undefined) {\n          this.ossInfo.TTID = this.$route.query.TTID;\n        }\n      }\n    }\n  },\n  mounted() {\n    this.getSaveId();\n    this.ossChecker();\n  }\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}