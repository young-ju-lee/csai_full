{"ast":null,"code":"import { createElementVNode as _createElementVNode, withKeys as _withKeys, toDisplayString as _toDisplayString, vShow as _vShow, withDirectives as _withDirectives, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"dt\", null, [/*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"user_id\"\n}, \"OTP 인증\")], -1 /* HOISTED */);\nconst _hoisted_2 = {\n  style: {\n    \"margin-bottom\": \"40px\"\n  }\n};\nconst _hoisted_3 = {\n  style: {\n    \"float\": \"left\"\n  }\n};\nconst _hoisted_4 = {\n  class: \"error_txt\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"dl\", null, [_hoisted_1, _createElementVNode(\"dd\", null, [_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"input_st_01\",\n    id: \"ontmPwd\",\n    placeholder: \"인증번호\",\n    onKeyup: _cache[0] || (_cache[0] = _withKeys($event => $options.authOtp(), [\"enter\"]))\n  }, null, 32 /* HYDRATE_EVENTS */)])]), _createElementVNode(\"p\", _hoisted_2, _toDisplayString($data.mainOtpText), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_3, \"남은시간 : \" + _toDisplayString($data.timer.text), 1 /* TEXT */), _withDirectives(_createElementVNode(\"p\", {\n    style: {\n      \"float\": \"right\",\n      \"cursor\": \"pointer\",\n      \"border\": \"1px solid #ccc\",\n      \"padding\": \"2px 5px\",\n      \"border-radius\": \"5px\",\n      \"vertical-align\": \"bottom\"\n    },\n    onClick: _cache[1] || (_cache[1] = $event => $options.resetOtp())\n  }, \"재발송\", 512 /* NEED_PATCH */), [[_vShow, this.userLoginInfo.loginPwd != null]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.authOtp()),\n    id: \"btn_otp\"\n  }, \"인증번호 확인\"), _createElementVNode(\"p\", _hoisted_4, _toDisplayString($data.errerText), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAEIA,oBAA4C,0BAAxCA,oBAAmC;EAA5BC,GAAG,EAAC;AAAS,GAAC,QAAM;;EAK9BC,KAA0B,EAA1B;IAAA;EAAA;AAA0B;;EAC1BA,KAAkB,EAAlB;IAAA;EAAA;AAAkB;;EAGlBC,KAAK,EAAC;AAAW;;6DAVpBH,oBAKK,aAJHI,UAA4C,EAC5CJ,oBAEK,aADHA,oBAAgG;IAAzFK,IAAI,EAAC,MAAM;IAACF,KAAK,EAAC,aAAa;IAACG,EAAE,EAAC,SAAS;IAACC,WAAW,EAAC,MAAM;IAAEC,OAAK,gDAAQC,gBAAO;yCAGhGT,oBAAiD,KAAjDU,UAAiD,mBAAjBC,iBAAW,kBAC3CX,oBAA+C,KAA/CY,UAA+C,EAAzB,SAAO,oBAAED,WAAK,CAACE,IAAI,kCACzCb,oBAAmM;IAAhME,KAAuH,EAAvH;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA,CAAuH;IAAEY,OAAK,sCAAEL,iBAAQ;KAAiD,KAAG,wCAAnCM,aAAa,CAACC,QAAQ,aAClLhB,oBAAwD;IAA/Cc,OAAK,sCAAEL,gBAAO;IAAIH,EAAE,EAAC;KAAU,SAAO,GAC/CN,oBAAsC,KAAtCiB,UAAsC,mBAAfN,eAAS","names":["_createElementVNode","for","style","class","_hoisted_1","type","id","placeholder","onKeyup","$options","_hoisted_2","$data","_hoisted_3","text","onClick","userLoginInfo","loginPwd","_hoisted_4"],"sourceRoot":"","sources":["C:\\CSAI_Front\\src\\views\\pages\\auth\\LoginOtp.vue"],"sourcesContent":["<template>\r\n  <dl>\r\n    <dt><label for=\"user_id\">OTP 인증</label></dt>\r\n    <dd>\r\n      <input type=\"text\" class=\"input_st_01\" id=\"ontmPwd\" placeholder=\"인증번호\" @keyup.enter=\"authOtp()\">\r\n    </dd>\r\n  </dl>\r\n  <p style=\"margin-bottom:40px\">{{mainOtpText}}</p>\r\n  <p style=\"float:left\">남은시간 : {{timer.text}}</p>\r\n  <p style=\"float:right; cursor: pointer; border:1px solid #ccc; padding:2px 5px; border-radius:5px; vertical-align:bottom;\" @click=\"resetOtp()\" v-show=\"this.userLoginInfo.loginPwd != null\">재발송</p>\r\n  <button @click=\"authOtp()\" id=\"btn_otp\">인증번호 확인</button>\r\n  <p class=\"error_txt\">{{errerText}}</p>\r\n</template>\r\n\r\n<script>\r\nimport RSAKey from '../../../utils/rsa/rsa';\r\n\r\nexport default {\r\n  name: 'LoginOtp',\r\n  emits : [\"setUiToggleNum\"],\r\n  data() {\r\n    return {\r\n      devtest : false, // #TODEL 개발 완료시 삭제 필요\r\n      timer : {\r\n        base : 180, // 기준 시간 - 초기화용\r\n        cont : 180, // 실제 처리용 시간\r\n        text : \"03:00\", // 화면에 표시될 시간\r\n        interval : \"\" // interval 세팅용 변수\r\n      },\r\n      mainOtpText : \"OTP 번호를 SMS 문자로 발송했습니다.\",\r\n      errerText : \"\", // UI : 공통 에러 표시\r\n    }\r\n  },\r\n  computed: {\r\n    userLoginData() {\r\n      // 로그인 성공 여부 & 에러 메시지\r\n      return this.$store.state.auth.userLoginData;\r\n    },\r\n    userInfo() {\r\n      // 로그인 사용자 정보\r\n      return this.$store.state.auth.userInfo;\r\n    },\r\n    userOtp() {\r\n      // Otp 정보 수신\r\n      return this.$store.state.auth.userOtp;\r\n    },\r\n    userLoginInfo(){\r\n      return this.$store.state.auth.userLoginInfo;\r\n    },\r\n    rsaKey() {\r\n      return this.$store.state.auth.rsaKey;\r\n    }\r\n  },\r\n  created() {\r\n    // #TODEL test용 - 기본값 false\r\n    this.timerStart();\r\n    if(process.env.VUE_APP_MODE == \"test\"){\r\n      this.devtest = true;\r\n    }\r\n  },\r\n  methods: {\r\n    // #TOFIX : 쿠키 가져오기 : 추후 보안 강화하고 공통 함수로 변경\r\n    getCookie(cName){\r\n      cName = cName + '=';\r\n      let cookieData = document.cookie;\r\n      let start = cookieData.indexOf(cName);\r\n      let cValue = '';\r\n      if(start != -1){\r\n        start += cName.length;\r\n        let end = cookieData.indexOf(';', start);\r\n        if(end == -1){\r\n          end == cookieData.length;\r\n        }\r\n        cValue = cookieData.substring(start, end);\r\n      }\r\n      return unescape(cValue);\r\n    },\r\n    // 인증번호 카운트 다운 - 시작\r\n    timerStart(){\r\n      this.timer.text = \"03:00\";\r\n      this.timer.cont = this.timer.base;\r\n      this.timer.interval = setInterval(() => {\r\n        this.timer.cont--;\r\n        this.timer.text = this.timerSetText();\r\n        if(this.timer.cont <= 0) {\r\n          this.timerStop();\r\n        }\r\n      }, 1000);\r\n    },\r\n    // 인증번호 카운트 다운 - 시간 종료\r\n    timerStop(){\r\n      clearInterval(this.timer.interval);\r\n      //let btn_otp = document.getElementById(\"btn_otp\");\r\n      //btn_otp.disabled = true;\r\n      this.errerText = \"인증 시간이 만료되었습니다.\";\r\n      this.timer.cont = 0;\r\n    },\r\n    // 인증번호 카운트 다운 - 남은 시간 화면에 텍스트로 추가\r\n    timerSetText(){\r\n      let time = this.timer.cont / 60;\r\n      let minutes = parseInt(time);\r\n      let secondes = Math.round((time - minutes) * 60);\r\n      return minutes.toString().padStart(2, \"0\") + \":\" + secondes.toString().padStart(2, \"0\")\r\n    },\r\n    // OTP 확인\r\n    resetOtp(){\r\n      this.timerStop();\r\n      // rsa 처리\r\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\r\n        const rsa = new RSAKey();\r\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\r\n        let loginId = this.userLoginInfo.loginId;\r\n        let loginPwd = this.userLoginInfo.loginPwd;\r\n        let payload = {\r\n            \"loginId\": rsa.encrypt(loginId), \r\n            \"loginPwd\": rsa.encrypt(loginPwd)\r\n        };\r\n        // $store 로그인 호출\r\n        this.$store.dispatch(\"auth/signin\", payload).then(() => {\r\n            // 로그인 성공시\r\n            if(this.userLoginData.resultCode == 1){\r\n\r\n              this.userLoginInfo.loginId = loginId;\r\n              this.userLoginInfo.loginPwd = loginPwd;\r\n              this.errerText = \"\";\r\n              document.getElementById(\"ontmPwd\").value = \"\";\r\n              this.mainOtpText = \"OTP 번호를 SMS 문자로 재발송했습니다.\"\r\n              this.timerStart();\r\n            }else{\r\n              // #TOFIX 반복 부분 함수화, URL 변수화\r\n              if(this.userLoginData.resultCode == 5){\r\n                this.errerText = \"내부 시스템 에러입니다.\"\r\n              }else if(this.userLoginData.resultCode == 95){\r\n                // #TOFIX 팝업 열리는 부분 공통 변수화\r\n                let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\r\n                window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\r\n              }else{\r\n                this.errerText = this.userLoginData.resultMessage\r\n                // this.$emit('setUiToggleNum', 2, 'pass');\r\n              }\r\n            }\r\n        }).catch(error => {\r\n          console.log(error);\r\n        });\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n\r\n    },\r\n    authOtp(){\r\n      // #TOCHK 값 value값 가져오는게 이게 최선인가? - 컨포넌트 환경에서 안맞는 기법인듯 함.\r\n      if(this.userInfo.resCd != 1){\r\n        alert(\"잘못된 접근입니다.\");\r\n        this.$emit('setUiToggleNum', 1, 'all');\r\n        return false;\r\n      }\r\n\r\n      let ontmPwd = document.getElementById(\"ontmPwd\").value;\r\n      if(ontmPwd == \"\"){\r\n        alert(\"OTP번호를 입력해주세요\");\r\n        document.getElementById(\"ontmPwd\").focus;\r\n      }\r\n      // rsa 처리\r\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\r\n        const rsa = new RSAKey();\r\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\r\n        let loginId = this.userLoginInfo.loginId;\r\n        let loginPwd = this.userLoginInfo.loginPwd;\r\n        // #TODO 기본 유효성 검증 추가되야되는 부분\r\n        let payload = {\r\n            \"loginId\": rsa.encrypt(loginId), \r\n            \"loginPwd\": rsa.encrypt(loginPwd),\r\n            \"ossAthnInntNo\": this.userInfo.ossAthnInntNo, \r\n            \"ontmPwd\": ontmPwd\r\n        };\r\n        // $store OTP 인증 호출\r\n        this.$store.dispatch(\"auth/authOtp\", payload).then(() => {\r\n          // otp 성공시\r\n          if(this.userOtp.resultCode == 1){\r\n            this.userLoginInfo.loginId = loginId;\r\n            this.userLoginInfo.loginPwd = loginPwd;\r\n            // #TOFIX : 보안에 몹시 위배됨으로 보안 처리할 때 개선 필요\r\n            //localStorage.setItem('userInfo', JSON.stringify(this.$store.state.auth.userInfo));\r\n            // #TODO : 쿠키값에서 토큰 값 추출\r\n            // getCookie(토큰명). 각 호출마다 refresh 토큰은 갱신해 줘야함 - 상태관리 공통 함수로 추가\r\n            // #TOFIX : 받아온 토큰 정보 입력\r\n            // console.log(\"accessToken = \" + this.getCookie(\"accessToken\"));\r\n            // console.log(\"refreshToken = \" + this.getCookie(\"refreshToken\"));\r\n            //localStorage.setItem('accessToken', \"받아온 토큰 정보 입력\"); //this.getCookie()\r\n            // 페이지 이동 : 알람톡\r\n            this.$router.push({path:'/alarm'});\r\n          }else{\r\n            // #TOFIX 반복 부분 함수화, URL 변수화\r\n            if(this.userOtp.resultCode == 5){\r\n              this.loginErrorText = \"내부 시스템 에러입니다.\"\r\n            }else if(this.userOtp.resultCode == 9){\r\n              // 재발송 관련된 에러 처리\r\n              //let btn_otp = document.getElementById(\"btn_otp\");\r\n              //btn_otp.disabled = true;\r\n              this.errerText = this.userOtp.resultMessage;\r\n            }else if(this.userOtp.resultCode == 95){\r\n              // #TOFIX 팝업 열리는 부분 공통 변수화\r\n              let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\r\n              window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\r\n            }else{\r\n              this.errerText = this.userOtp.resultMessage;\r\n            }\r\n          }\r\n        }).catch(error => {\r\n          console.log(error);\r\n        });\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}