{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/CSAI_Front/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es.array.push.js\");\nvar _rsa = _interopRequireDefault(require(\"../../../utils/rsa/rsa\"));\nvar _default = {\n  name: 'LoginOtp',\n  emits: [\"setUiToggleNum\"],\n  data() {\n    return {\n      devtest: false,\n      // #TODEL 개발 완료시 삭제 필요\n      timer: {\n        base: 180,\n        // 기준 시간 - 초기화용\n        cont: 180,\n        // 실제 처리용 시간\n        text: \"03:00\",\n        // 화면에 표시될 시간\n        interval: \"\" // interval 세팅용 변수\n      },\n\n      mainOtpText: \"OTP 번호를 SMS 문자로 발송했습니다.\",\n      errerText: \"\" // UI : 공통 에러 표시\n    };\n  },\n\n  computed: {\n    userLoginData() {\n      // 로그인 성공 여부 & 에러 메시지\n      return this.$store.state.auth.userLoginData;\n    },\n    userInfo() {\n      // 로그인 사용자 정보\n      return this.$store.state.auth.userInfo;\n    },\n    userOtp() {\n      // Otp 정보 수신\n      return this.$store.state.auth.userOtp;\n    },\n    userLoginInfo() {\n      return this.$store.state.auth.userLoginInfo;\n    },\n    rsaKey() {\n      return this.$store.state.auth.rsaKey;\n    }\n  },\n  created() {\n    // #TODEL test용 - 기본값 false\n    this.timerStart();\n    if (process.env.VUE_APP_MODE == \"test\") {\n      this.devtest = true;\n    }\n  },\n  methods: {\n    // #TOFIX : 쿠키 가져오기 : 추후 보안 강화하고 공통 함수로 변경\n    getCookie(cName) {\n      cName = cName + '=';\n      let cookieData = document.cookie;\n      let start = cookieData.indexOf(cName);\n      let cValue = '';\n      if (start != -1) {\n        start += cName.length;\n        let end = cookieData.indexOf(';', start);\n        if (end == -1) {\n          end == cookieData.length;\n        }\n        cValue = cookieData.substring(start, end);\n      }\n      return unescape(cValue);\n    },\n    // 인증번호 카운트 다운 - 시작\n    timerStart() {\n      this.timer.text = \"03:00\";\n      this.timer.cont = this.timer.base;\n      this.timer.interval = setInterval(() => {\n        this.timer.cont--;\n        this.timer.text = this.timerSetText();\n        if (this.timer.cont <= 0) {\n          this.timerStop();\n        }\n      }, 1000);\n    },\n    // 인증번호 카운트 다운 - 시간 종료\n    timerStop() {\n      clearInterval(this.timer.interval);\n      //let btn_otp = document.getElementById(\"btn_otp\");\n      //btn_otp.disabled = true;\n      this.errerText = \"인증 시간이 만료되었습니다.\";\n      this.timer.cont = 0;\n    },\n    // 인증번호 카운트 다운 - 남은 시간 화면에 텍스트로 추가\n    timerSetText() {\n      let time = this.timer.cont / 60;\n      let minutes = parseInt(time);\n      let secondes = Math.round((time - minutes) * 60);\n      return minutes.toString().padStart(2, \"0\") + \":\" + secondes.toString().padStart(2, \"0\");\n    },\n    // OTP 확인\n    resetOtp() {\n      this.timerStop();\n      // rsa 처리\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\n        const rsa = new _rsa.default();\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\n        let loginId = this.userLoginInfo.loginId;\n        let loginPwd = this.userLoginInfo.loginPwd;\n        let payload = {\n          \"loginId\": rsa.encrypt(loginId),\n          \"loginPwd\": rsa.encrypt(loginPwd)\n        };\n        // $store 로그인 호출\n        this.$store.dispatch(\"auth/signin\", payload).then(() => {\n          // 로그인 성공시\n          if (this.userLoginData.resultCode == 1) {\n            this.userLoginInfo.loginId = loginId;\n            this.userLoginInfo.loginPwd = loginPwd;\n            this.errerText = \"\";\n            document.getElementById(\"ontmPwd\").value = \"\";\n            this.mainOtpText = \"OTP 번호를 SMS 문자로 재발송했습니다.\";\n            this.timerStart();\n          } else {\n            // #TOFIX 반복 부분 함수화, URL 변수화\n            if (this.userLoginData.resultCode == 5) {\n              this.errerText = \"내부 시스템 에러입니다.\";\n            } else if (this.userLoginData.resultCode == 95) {\n              // #TOFIX 팝업 열리는 부분 공통 변수화\n              let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\n              window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\n            } else {\n              this.errerText = this.userLoginData.resultMessage;\n              // this.$emit('setUiToggleNum', 2, 'pass');\n            }\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    authOtp() {\n      // #TOCHK 값 value값 가져오는게 이게 최선인가? - 컨포넌트 환경에서 안맞는 기법인듯 함.\n      if (this.userInfo.resCd != 1) {\n        alert(\"잘못된 접근입니다.\");\n        this.$emit('setUiToggleNum', 1, 'all');\n        return false;\n      }\n      let ontmPwd = document.getElementById(\"ontmPwd\").value;\n      if (ontmPwd == \"\") {\n        alert(\"OTP번호를 입력해주세요\");\n        document.getElementById(\"ontmPwd\").focus;\n      }\n      // rsa 처리\n      this.$store.dispatch(\"auth/rsaGetKey\").then(() => {\n        const rsa = new _rsa.default();\n        rsa.setPublic(this.rsaKey.public_key_modulus, this.rsaKey.public_key_exponent);\n        let loginId = this.userLoginInfo.loginId;\n        let loginPwd = this.userLoginInfo.loginPwd;\n        // #TODO 기본 유효성 검증 추가되야되는 부분\n        let payload = {\n          \"loginId\": rsa.encrypt(loginId),\n          \"loginPwd\": rsa.encrypt(loginPwd),\n          \"ossAthnInntNo\": this.userInfo.ossAthnInntNo,\n          \"ontmPwd\": ontmPwd\n        };\n        // $store OTP 인증 호출\n        this.$store.dispatch(\"auth/authOtp\", payload).then(() => {\n          // otp 성공시\n          if (this.userOtp.resultCode == 1) {\n            this.userLoginInfo.loginId = loginId;\n            this.userLoginInfo.loginPwd = loginPwd;\n            // #TOFIX : 보안에 몹시 위배됨으로 보안 처리할 때 개선 필요\n            //localStorage.setItem('userInfo', JSON.stringify(this.$store.state.auth.userInfo));\n            // #TODO : 쿠키값에서 토큰 값 추출\n            // getCookie(토큰명). 각 호출마다 refresh 토큰은 갱신해 줘야함 - 상태관리 공통 함수로 추가\n            // #TOFIX : 받아온 토큰 정보 입력\n            // console.log(\"accessToken = \" + this.getCookie(\"accessToken\"));\n            // console.log(\"refreshToken = \" + this.getCookie(\"refreshToken\"));\n            //localStorage.setItem('accessToken', \"받아온 토큰 정보 입력\"); //this.getCookie()\n            // 페이지 이동 : 알람톡\n            this.$router.push({\n              path: '/alarm'\n            });\n          } else {\n            // #TOFIX 반복 부분 함수화, URL 변수화\n            if (this.userOtp.resultCode == 5) {\n              this.loginErrorText = \"내부 시스템 에러입니다.\";\n            } else if (this.userOtp.resultCode == 9) {\n              // 재발송 관련된 에러 처리\n              //let btn_otp = document.getElementById(\"btn_otp\");\n              //btn_otp.disabled = true;              \n              this.errerText = this.userOtp.resultMessage;\n            } else if (this.userOtp.resultCode == 95) {\n              // #TOFIX 팝업 열리는 부분 공통 변수화\n              let options = \"top=10, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no\";\n              window.open(\"http://ktsso.kt.com/ssologin/guide/pwdTab.html\", \"비밀번호 변경\", options);\n            } else {\n              this.errerText = this.userOtp.resultMessage;\n            }\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    skipOtp() {\n      this.$store.dispatch(\"auth/skipOtp\", payload).then(() => {\n        // otp 성공시\n        if (this.userOtp.resultCode == 2) {\n          this.userLoginInfo.loginId = loginId;\n          this.userLoginInfo.loginPwd = loginPwd;\n          this.$router.push({\n            path: '/alarm'\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}