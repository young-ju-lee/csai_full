package com.kt.csai.domain.alarmtalk.exception.model;

import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum AlarmTalkErrorCode {
	NO_JSON_BODY("1001", "Request Body가 Json형식이 아닙니다.")
	, INVALID_HUB_PARTNER_KEY("1002", "파트너 키가 유효하지 않습니다.")
	, INVALID_SENDER_KEY("1003", "발신 프로필 키가 유효하지 않습니다.")
	, NO_VALUE_JSON_ELEMENT("1004", "Request Body에서 'name'을 찾을 수 없습니다.")
	, SENDER_NOT_FOUND("1005", "발신 프로필을 찾을 수 없습니다.")
	, DELETED_SENDER("1006", "삭제된 발신 프로필입니다.")
	, STOPPED_SENDER("1007", "차단 상태의 발신 프로필입니다.")
	, CONTRACT_NOT_FOUND("1011", "계약 정보를 찾을 수 없습니다.")
	, INVALID_USER_KEY_EXCEPTION("1012", "잘못된 형식의 user key 요청입니다.")
	, INVALID_APP_LINK("1013", "유효하지 않은 app 연결입니다.")
	, INVALID_BIZ_NUM("1014", "유효하지 않은 사업자 번호입니다.")
	, TALK_USER_ID_NOT_FOUND("1015", "유효하지 않은 app user id 요청입니다.")
	, BIZ_NUM_NOT_EQUAL("1016", "사업자 등록 번호 불일치입니다.")
	, INVALID_RECEIVE_USER_EXCEPTION("1020", "올바른 유저 식별 값이 없습니다.")
	, BLOCKED_PROFILE("1021", "차단 상태의 카카오톡 채널입니다.")
	, DEACTIVATED_PROFILE("1022", "닫힘 상태의 카카오톡 채널입니다.")
	, DELETED_PROFILE("1023", "삭제된 카카오톡 채널입니다.")
	, DELETING_PROFILE("1024", "삭제 대기 상태의 카카오톡 채널입니다.")
	, SPAMMED_PROFILE("1025", "메세지 차단 상태의 카카오톡 채널입니다.")
	, UNABLE_USE_MESSAGE_TYPE("1026", "해당 'msg_type'에서 사용할 수 없는 'reponse_method'입니다.")
	, INVALID_PARAMETER_EXCEPTION("1030", "잘못된 파라미터 요청입니다.")
	, NO_MATCHED_TEMPLATE_MESSAGE_TYPE("1033", "템플릿 타입과 메세지 타입이 일치하지 않습니다.")
	, FAILED_TO_SEND_MESSAGE_BY_NO_FRIENDSHIP_EXCEPTION("2003", "테스트 서버에 카카오톡 채널이 추가되지 않았습니다.")
	, FAILED_TO_MATCH_TEMPLATE_EXCEPTION("2004", "템플릿 일치 확인 중 오류가 발생했습니다. (카카오 내부)")
	, FAILED_TO_MATCH_SERIAL_NUMBER_PREFIX_PATTERN("2006", "시리얼 넘버 형식이 불일치합니다.")
	, UNEXCEPTED_EXCEPTION("3000", "예기치 않은 오류가 발생했습니다.")
	, ACK_TIMEOUT_EXCEPTION("3005", "메세지를 발송 했으나 수신 확인이 되지 않았습니다.")
	, FAILED_TO_SEND_MESSAGE_EXCEPTION("3006", "카카오 내부 시스템 오류로 인해 메세지 전송이 실패했습니다.")
	, INVALID_PHONE_NUMBER_EXCEPTION("3008", "전화 번호가 유효하지 않습니다.")
	, JSON_PARSSE_EXCEPTION("3010", "JSON 파싱 오류가 발생했습니다.")
	, MESSAGE_NOT_FOUND_EXCEPTION("3011", "메세지가 존재하지 않습니다.")
	, SERIAL_NUMBER_DUPLICATED_EXCEPTION("3012", "메세지 일련 번호가 중복되었습니다.")
	, MESAGE_EMPTY_EXCEPTION("3013", "메세지가 비어있습니다.")
	, MESSAGE_LENGTH_OVER_LIMIT_EXCEPTION("3014", "메세지 길이가 초과 되었습니다. (텍스트 타입 1000자 이내, 이미지 타입 400자 이내)")
	, TEMPLATE_NOT_FOUND_EXCEPTION("3015", "템플릿을 찾을 수 없습니다.")
	, NO_MATCHED_TEMPLATE_EXCEPTION("3016", "메세지 내용이 템플릿과 일치하지 않습니다.")
	, NO_SEND_AVAILABLE_EXCEPTION("3018", "메세지를 전송할 수 없습니다.")
	, SEEN_INFO_NOT_FOUND_EXCEPTION("3020", "메세지 확인 정보를 찾을 수 없습니다.")
	, NO_SEND_AVAILABLE_TIME_EXCEPTION("3022", "메세지를 발송할 수 있는 시간이 아닙니다.")
	, MESSAGE_INVALID_IMAGE_EXCEPTION("3024", "메세지에 포함된 이미지를 전송할 수 없습니다.")
	, EXCEED_MAX_VARIABLE_LENGTH_EXCEPTION("3025", "변수 글자 수 제한이 초과 되었습니다.")
	, BUTTON_EXTRA_LENGTH_OVER_LIMIT_EXCEPTION("3026", "상담/봇 전환 버튼 extra, event 글자 수 제한이 초과 되었습니다.")
	, NO_MATCHED_TEMPLATE_BUTTON_EXCEPTION("3027", "메세지 버튼이 템플릿과 일치하지 않습니다.")
	, NO_MATCHED_TEMPLATE_TITLE_EXCEPTION("3028", "메세지 강조 표기 타이틀이 템플릿과 일치하지 않습니다.")
	, EXCEED_MAX_TITLE_LENGTH_EXCEPTION("3029", "메세지 강조 표기 타이틀 글자 수 제한이 초과 되었습니다. (50 자)")
	, NO_MATCHED_TEMPLATE_WITH_MESSAGE_TYPE_EXCEPTION("3030", "메세지 타입과 템플릿 강조 유형이 일치하지 않습니다.")
	, NO_MATCHED_TEMPLATE_HEADER_EXCEPTION("3031", "헤더가 템플릿과 일치하지 않습니다.")
	, EXCEED_MAX_HEADER_LENGTH_EXCEPTION("3032", "헤더 길이가 초과 되었습니다. (16 자)")
	, NO_MATCHED_TEMPLATE_ITEM_HIGHLIGHT_EXCEPTION("3033", "아이템 하이라이트가 템플릿과 일치하지 않습니다.")
	, EXCEED_MAX_ITEM_HIGHLIGHT_TITLE_LENGTH_EXCEPTION("3034", "아이템 하이라이트 타이틀 길이가 초과 되었습니다.")
	, EXCEED_MAX_ITEM_HIGHLIGHT_DESCRIPTION_LENGTH_EXCEPTION("3035", "아이템 하이라이트 디스크립션 길이가 초과 되었습니다.")
	, NO_MATHCHED_TEMPLATE_ITEM_LIST_EXCEPTION("3036", "아이템 리스트가 템플릿과 일치하지 않습니다.")
	, EXCEED_MAX_ITEM_DESCRIPTION_LENGTH_EXCEPTION("3037", "아이템 리스트의 아이템 디스크립션 길이가 초과 되었습니다.")
	, NO_MATCHED_TEMPLATE_ITEM_SUMMARY_EXCEPTION("3038", "아이템 요약 정보가 템플릿과 일치하지 않습니다.")
	, EXCEED_MAX_ITEM_SUMMARY_DESCRIPTION_LENGTH_EXCEPTION("3039", "아이템 요약 정보의 디스크립션 길이가 초과 되었습니다.")
	, INVALID_ITEM_SUMMARY_DESCRIPTION_EXCEPTION("3040", "아이템 요약 정보의 디스크립션에 허용되지 않는 문자가 포함 되었습니다.")
	, RESPONSE_HISTORY_NOT_FOUND_EXCEPTION("4000", "메세지 전송 결과를 찾을 수 없습니다.")
	, UNKNOWN_MESSAGE_STATUS_ERROR("4001", "알 수 없는 메세지 상태입니다.")
	, INVALID_TEST_USER("5000", "(테스트 발송) 관리자 혹은 일회성 인증을 받은 사용자가 아닙니다.")
	, DAILY_TEST_LIMIT_EXCEEDED("5001", "(테스트 발송) 일일 발송량이 초과 되었습니다.")
	, INVALID_SERIAL_PATTERN_ERROR("7011", "시리얼 넘버 패턴 에러입니다.")
	, MESSAGE_TIMEOUT_ERROR("7014", "메세지 유효 시간이 초과 했습니다.")
	, RECEIVER_TYPE_NOT_FOUND("8512", "수신자 타입을 찾을 수 없습니다.")
	, REQUEST_ID_NOT_FOUND("8514", "'request_id'를 찾을 수 없습니다.")
	, UNSUPPORTED_ITEM_TYPE("8520", "지원하지 않는 상품 타입입니다.")
	, UNSUPPORTED_MESSAGE_TYPE("8521", "지원하지 않는 메세지 타입입니다.")
	, UNSUPPORTED_TEXT_TYPE("8522", "지원하지 않는 텍스트 유형입니다.")
	, UNSUPPORTED_RESPONSE_METHOD("8523", "지원하지 않는 'response method'입니다.")
	, RECEIVER_LIST_SIZE_EXCEPTION("8530", "수신자 목록 사이즈 오류입니다.")
	, INTERNAL_SERVER_EXCEPTION("8999", "내부 서버 오류입니다.")
	, NOT_PROVIDED_SERVICE("9998", "현재 서비스를 제공하고 있지 않습니다.")
	, UNKWON_EXCEPTION("9999", "알 수 없는 문제가 발생하여 담당자가 확인 중에 있습니다.")
	
	
	, UNAUTHORIZED_CLIENT_ID("A001", "인가되지 않은 계정입니다.")
	, NOT_EXISTING_CLIENT_ID("A002", "존재하지 않는 계정입니다.")
	, NOT_ALLOW_MT_FAILOVER("A003", "MT Failover 불가한 계정입니다.")
	, MISSING_REQUEST_HEADER("A004", "헤더에 X-IB-Client_Id 또는 X-IB-Client-Passwd, Authorization이 누락되었습니다.")
	, INVALID_ACCESS_TOKEN("A005", "유효하지 않은 토큰입니다.")
	, NULL_OR_EMPTY_RESPONSE_METHOD("A100", "'response_method' 값이 없습니다.")
	, WRONG_RESPONSE_METHOD("A101", "잘못된 'response_method' 값입니다.")
	, NULL_OR_EMPTY_SENDER_KEY("A102", "'senderKey' 값이 없습니다.")
	, NOT_INCLUDED_BUTTON_OPTION("A103", "버튼의 필수 이름, 타입이 누락 되었습니다.")
	, EMPTY_BUTTON("A104", "버튼이 누락 되었습니다.")
	, INVALID_BUTTON_TYPE("A105", "잘못된 버튼 타입입니다.")
	//, MISSING_URL_MOBILE_FOR_WL_BUTTON("A106", "WL 버튼에 필요한 'url_mobile' 값이 누락 되었습니다.")
	, MISSING_SCHEME_ANDROID_FOR_AL("A107", "AL 버튼에 필요한 'Scheme_android' 값이 누락 되었습니다.")
	, MISSING_SCHEME_IOS_FOR_AL("A108", "AL 버튼에 필요한 'Scheme_ios' 값이 누락 되었습니다.")
	, MISSING_SENDER_ID("A109", "수신자가 누락 되었습니다")
	, MISSING_FIELD("A110", "송신자가 누락 되었습니다.")
	, MISSING_CONTENT("A111", "메세지 내용이 누락 되었습니다.")
	//, MISSING_IMAGE_URL("A112", "'img_url' 값이 누락 되었습니다.")
	, MISSING_MESSAG_TYPE("A113", "'msgType' 값이 누락 되었습니다.")
	, WRONG_MESSAG_TYPE("A114", "'msgType' 값이 잘못 되었습니다.")
	, MISSING_TEMPLATE_CODE("A115", "템플릿 코드가 누락 되었습니다.")
	, EXCEEDED_MAX_CONTENT_LENGTH("A116", "최대 메세지 길이가 초과 되었습니다.")
	, EXCEEDED_MAX_SENDER_ID_LENGTH("A117", "송신자 번호 길이가 초과 되었습니다.")
	, EXCEEDED_MAX_TO_LENGTH("A118", "수신자 번호 길이가 초과 되었습니다.")
	//, EXCEEDED_MAX_AD_FLAG_LENGTH("A119", "'ad_flag' 값의 길이가 초과 되었습니다.")
	, EXCEEDED_MAX_USER_KEY_LENGTH("A120", "'user_key' 값의 길이가 초과 되었습니다.")
	, INVALID_MT_FAILOVER("A121", "'mt_failover' 값이 잘못 되었습니다.")
	, EXCEEDED_MAX_MT_FAILOVER_CONTENT_LENGTH("A122", "'mt_failover' 값의 길이가 초과 되었습니다.")
	//, EXCEEDED_MAX_WIDE_LENGTH("A123", "wide 길이가 초과 되었습니다.")
	, MISSING_USER_KEY_AND_TO_FOR_FT("A124", "친구톡 'user_key', 'to'가 누락 되었습니다.")
	, EXCEEDED_MAX_APP_USER_ID_LENGTH("A123", "'user_key' 값의 길이가 초과 되었습니다.")
	, EMPTY_APP_USER_ID("A126", "'app_user_id'의 값이 비어있습니다.")
	, MISSING_APP_USER_ID_AND_TO_FOR_AL("A127", "알림톡 'app_user_id', 'to'가 누락 되었습니다.")
	, EMPTY_USER_KEY("A128", "'user_key'의 값이 비어있습니다.")
	, MISSING_DUPLICATE_GROUP_CODE("A129", "중복 그룹 코드가 누락 되었습니다.")
	, EXCEEDED_MAX_PAYMENT_CODE_LENGTH("A130", "과금 분리 코드 길이가 초과 되었습니다.")
	, MISSING_IMAGE_FOR_WIDE("A131", "wide를 사용하나 이미지가 누락되었습니다.")
	, EXCEEDED_MAX_TITLE_LENGTH("A132", "타이틀 길이가 초과 되었습니다.")
	, EXCEEDED_MAX_REF_LENGTH("A138", "'ref' 값의 길이가 초과 되었습니다.")
	, EXCEEDED_MAX_CURRENCY_TYPE_LENGTH("A148", "'currency_type' 값의 길이가 초과 되었습니다.")
	, EXCEEDED_MAX_HEADER_LENGTH("A152", "header 길이가 초과 되었습니다.")
	, MISSING_ITEM_TITLE_OR_DESCRIPTION("A153", "아이템의 타이블/부가 정보가 누락 되었습니다.")
	, EXCEEDED_MAX_ITEM_TITLE_OR_DESCRIPTION_LENGTH("A154", "아이템의 타이블/부가 정보의 길이가 초과 되었습니다.")
	, INVALID_JSON_FORMAT("A201", "JSON 형식 오류가 발생했습니다.")
	, EXCEEDED_MAXIMUM_NUMBER_OF_SENT("A200", "발송 가능 건수가 초과 되었습니다.")
	, UNKNOWN_ERROR("A999", "알 수 없는 에러가 발생했습니다.")
	;

	private final String errorCode;
	private final String errorMessage;

	private static final Map<String, AlarmTalkErrorCode> BY_ERROR_CODE = Stream.of(values())
			.collect(Collectors.toMap(AlarmTalkErrorCode::getErrorCode, e -> e));
	
	public static AlarmTalkErrorCode valueOfErrorCode(String errorCode) {
		return BY_ERROR_CODE.get(errorCode);
	}
}
